/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface StakingInterface extends utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "agreements(bytes32)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "closeChannel(bytes32)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "getClaims(address)": FunctionFragment;
    "getId(address,uint256)": FunctionFragment;
    "getVotePriceMultiplier(uint256,uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "lockedStake(address,bytes32)": FunctionFragment;
    "maxPricePerVote()": FunctionFragment;
    "minimumPricePerVote()": FunctionFragment;
    "openChannel(uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "reputationContractAddress()": FunctionFragment;
    "toPrecision(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRECISION"
      | "addOwner"
      | "agreements"
      | "claimable"
      | "closeChannel"
      | "deposits"
      | "getClaims"
      | "getId"
      | "getVotePriceMultiplier"
      | "isOwner"
      | "lockedStake"
      | "maxPricePerVote"
      | "minimumPricePerVote"
      | "openChannel"
      | "removeOwner"
      | "reputationContractAddress"
      | "toPrecision"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "closeChannel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(functionFragment: "getClaims", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePriceMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockedStake",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPricePerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPricePerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openChannel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reputationContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toPrecision",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotePriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPricePerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumPricePerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toPrecision",
    data: BytesLike
  ): Result;

  events: {
    "AgreementCreated(address,bytes32,uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "OwnerAdded(address,address)": EventFragment;
    "OwnerRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
}

export interface AgreementCreatedEventObject {
  voter: string;
  id: string;
  amount: BigNumber;
  costPerVoteMultiplier: BigNumber;
}
export type AgreementCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AgreementCreatedEventObject
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export interface DepositEventObject {
  voter: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnerAddedEventObject {
  addedOwner: string;
  addedBy: string;
}
export type OwnerAddedEvent = TypedEvent<
  [string, string],
  OwnerAddedEventObject
>;

export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;

export interface OwnerRemovedEventObject {
  removedOwner: string;
  removedBy: string;
}
export type OwnerRemovedEvent = TypedEvent<
  [string, string],
  OwnerRemovedEventObject
>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    agreements(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        voter: string;
        commitAmount: BigNumber;
        pricePerVoteMultiplier: BigNumber;
        isClosed: boolean;
      }
    >;

    claimable(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    closeChannel(
      _id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaims(_voter: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getId(
      _address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVotePriceMultiplier(
      _reputation: BigNumberish,
      _maxReputation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { lockedAmount: BigNumber; isUnlocked: boolean }
    >;

    maxPricePerVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumPricePerVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    openChannel(
      _commitAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reputationContractAddress(overrides?: CallOverrides): Promise<[string]>;

    toPrecision(
      _input: BigNumberish,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addOwner(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  agreements(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      voter: string;
      commitAmount: BigNumber;
      pricePerVoteMultiplier: BigNumber;
      isClosed: boolean;
    }
  >;

  claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  closeChannel(
    _id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getClaims(_voter: string, overrides?: CallOverrides): Promise<BigNumber>;

  getId(
    _address: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVotePriceMultiplier(
    _reputation: BigNumberish,
    _maxReputation: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  lockedStake(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { lockedAmount: BigNumber; isUnlocked: boolean }
  >;

  maxPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

  minimumPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

  openChannel(
    _commitAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOwner(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reputationContractAddress(overrides?: CallOverrides): Promise<string>;

  toPrecision(
    _input: BigNumberish,
    _precision: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(account: string, overrides?: CallOverrides): Promise<void>;

    agreements(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        voter: string;
        commitAmount: BigNumber;
        pricePerVoteMultiplier: BigNumber;
        isClosed: boolean;
      }
    >;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    closeChannel(_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClaims(_voter: string, overrides?: CallOverrides): Promise<BigNumber>;

    getId(
      _address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVotePriceMultiplier(
      _reputation: BigNumberish,
      _maxReputation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { lockedAmount: BigNumber; isUnlocked: boolean }
    >;

    maxPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

    openChannel(
      _commitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOwner(account: string, overrides?: CallOverrides): Promise<void>;

    reputationContractAddress(overrides?: CallOverrides): Promise<string>;

    toPrecision(
      _input: BigNumberish,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AgreementCreated(address,bytes32,uint256,uint256)"(
      voter?: string | null,
      id?: null,
      amount?: null,
      costPerVoteMultiplier?: null
    ): AgreementCreatedEventFilter;
    AgreementCreated(
      voter?: string | null,
      id?: null,
      amount?: null,
      costPerVoteMultiplier?: null
    ): AgreementCreatedEventFilter;

    "Deposit(address,uint256)"(
      voter?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(voter?: string | null, amount?: null): DepositEventFilter;

    "OwnerAdded(address,address)"(
      addedOwner?: string | null,
      addedBy?: string | null
    ): OwnerAddedEventFilter;
    OwnerAdded(
      addedOwner?: string | null,
      addedBy?: string | null
    ): OwnerAddedEventFilter;

    "OwnerRemoved(address,address)"(
      removedOwner?: string | null,
      removedBy?: string | null
    ): OwnerRemovedEventFilter;
    OwnerRemoved(
      removedOwner?: string | null,
      removedBy?: string | null
    ): OwnerRemovedEventFilter;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    agreements(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    closeChannel(
      _id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClaims(_voter: string, overrides?: CallOverrides): Promise<BigNumber>;

    getId(
      _address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotePriceMultiplier(
      _reputation: BigNumberish,
      _maxReputation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

    openChannel(
      _commitAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reputationContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    toPrecision(
      _input: BigNumberish,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    agreements(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeChannel(
      _id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaims(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(
      _address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePriceMultiplier(
      _reputation: BigNumberish,
      _maxReputation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPricePerVote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumPricePerVote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openChannel(
      _commitAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reputationContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toPrecision(
      _input: BigNumberish,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
