/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface StakingV1StorageInterface extends utils.Interface {
  functions: {
    "agreements(bytes32)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "lockedStake(address,bytes32)": FunctionFragment;
    "maxPricePerVote()": FunctionFragment;
    "minimumPricePerVote()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agreements"
      | "claimable"
      | "deposits"
      | "lockedStake"
      | "maxPricePerVote"
      | "minimumPricePerVote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agreements",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockedStake",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPricePerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPricePerVote",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPricePerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumPricePerVote",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StakingV1Storage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingV1StorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agreements(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        voter: string;
        commitAmount: BigNumber;
        pricePerVoteMultiplier: BigNumber;
        isClosed: boolean;
      }
    >;

    claimable(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { lockedAmount: BigNumber; isUnlocked: boolean }
    >;

    maxPricePerVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumPricePerVote(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  agreements(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      voter: string;
      commitAmount: BigNumber;
      pricePerVoteMultiplier: BigNumber;
      isClosed: boolean;
    }
  >;

  claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lockedStake(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { lockedAmount: BigNumber; isUnlocked: boolean }
  >;

  maxPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

  minimumPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    agreements(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        voter: string;
        commitAmount: BigNumber;
        pricePerVoteMultiplier: BigNumber;
        isClosed: boolean;
      }
    >;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { lockedAmount: BigNumber; isUnlocked: boolean }
    >;

    maxPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    agreements(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPricePerVote(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    agreements(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStake(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPricePerVote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumPricePerVote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
