/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace GoldenProtocolQuestion {
  export type AnswerStruct = {
    answerer: string;
    answer: string;
    voteCount: BigNumberish;
  };

  export type AnswerStructOutput = [string, string, BigNumber] & {
    answerer: string;
    answer: string;
    voteCount: BigNumber;
  };
}

export interface GoldenProtocolQuestionInterface extends utils.Interface {
  functions: {
    "addAnswer(string)": FunctionFragment;
    "answer()": FunctionFragment;
    "answers()": FunctionFragment;
    "asker()": FunctionFragment;
    "bounty()": FunctionFragment;
    "hashAnswer(address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "payout()": FunctionFragment;
    "predicateUUID()": FunctionFragment;
    "subjectUUID()": FunctionFragment;
    "topAnswer()": FunctionFragment;
    "upvote(uint256)": FunctionFragment;
    "votes()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAnswer"
      | "answer"
      | "answers"
      | "asker"
      | "bounty"
      | "hashAnswer"
      | "owner"
      | "payout"
      | "predicateUUID"
      | "subjectUUID"
      | "topAnswer"
      | "upvote"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addAnswer", values: [string]): string;
  encodeFunctionData(functionFragment: "answer", values?: undefined): string;
  encodeFunctionData(functionFragment: "answers", values?: undefined): string;
  encodeFunctionData(functionFragment: "asker", values?: undefined): string;
  encodeFunctionData(functionFragment: "bounty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashAnswer",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predicateUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subjectUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "topAnswer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upvote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "votes", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "answer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "answers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predicateUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upvote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {};
}

export interface GoldenProtocolQuestion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldenProtocolQuestionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAnswer(
      _answer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    answer(overrides?: CallOverrides): Promise<[string]>;

    answers(overrides?: CallOverrides): Promise<[string[]]>;

    asker(overrides?: CallOverrides): Promise<[string]>;

    bounty(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashAnswer(
      answerer: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predicateUUID(overrides?: CallOverrides): Promise<[string]>;

    subjectUUID(overrides?: CallOverrides): Promise<[string]>;

    topAnswer(
      overrides?: CallOverrides
    ): Promise<[GoldenProtocolQuestion.AnswerStructOutput]>;

    upvote(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votes(overrides?: CallOverrides): Promise<[BigNumber[]]>;
  };

  addAnswer(
    _answer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  answer(overrides?: CallOverrides): Promise<string>;

  answers(overrides?: CallOverrides): Promise<string[]>;

  asker(overrides?: CallOverrides): Promise<string>;

  bounty(overrides?: CallOverrides): Promise<BigNumber>;

  hashAnswer(
    answerer: string,
    value: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predicateUUID(overrides?: CallOverrides): Promise<string>;

  subjectUUID(overrides?: CallOverrides): Promise<string>;

  topAnswer(
    overrides?: CallOverrides
  ): Promise<GoldenProtocolQuestion.AnswerStructOutput>;

  upvote(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votes(overrides?: CallOverrides): Promise<BigNumber[]>;

  callStatic: {
    addAnswer(_answer: string, overrides?: CallOverrides): Promise<void>;

    answer(overrides?: CallOverrides): Promise<string>;

    answers(overrides?: CallOverrides): Promise<string[]>;

    asker(overrides?: CallOverrides): Promise<string>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    hashAnswer(
      answerer: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payout(overrides?: CallOverrides): Promise<void>;

    predicateUUID(overrides?: CallOverrides): Promise<string>;

    subjectUUID(overrides?: CallOverrides): Promise<string>;

    topAnswer(
      overrides?: CallOverrides
    ): Promise<GoldenProtocolQuestion.AnswerStructOutput>;

    upvote(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    votes(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    addAnswer(
      _answer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    answer(overrides?: CallOverrides): Promise<BigNumber>;

    answers(overrides?: CallOverrides): Promise<BigNumber>;

    asker(overrides?: CallOverrides): Promise<BigNumber>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    hashAnswer(
      answerer: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predicateUUID(overrides?: CallOverrides): Promise<BigNumber>;

    subjectUUID(overrides?: CallOverrides): Promise<BigNumber>;

    topAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    upvote(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votes(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAnswer(
      _answer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    answer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    answers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bounty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashAnswer(
      answerer: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predicateUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subjectUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    topAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upvote(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
