/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface GoldenStakingInterface extends utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "lockedUntilBlock(address)": FunctionFragment;
    "minimumStaking()": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverERC20(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMinimumStaking(uint256)": FunctionFragment;
    "setStakingPeriod(uint256)": FunctionFragment;
    "stakingPeriod()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balances"
      | "initialize"
      | "lockedUntilBlock"
      | "minimumStaking"
      | "owner"
      | "recoverERC20"
      | "renounceOwnership"
      | "setMinimumStaking"
      | "setStakingPeriod"
      | "stakingPeriod"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedUntilBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStaking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedUntilBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "MinimumStakingChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256,uint256)": EventFragment;
    "StakingPeriodChanged(uint256)": EventFragment;
    "TokensRecovered(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumStakingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimumStakingChangedEventObject {
  minimumStaking: BigNumber;
}
export type MinimumStakingChangedEvent = TypedEvent<
  [BigNumber],
  MinimumStakingChangedEventObject
>;

export type MinimumStakingChangedEventFilter =
  TypedEventFilter<MinimumStakingChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedEventObject {
  account: string;
  amount: BigNumber;
  lockedUntil: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface StakingPeriodChangedEventObject {
  stakingPeriod: BigNumber;
}
export type StakingPeriodChangedEvent = TypedEvent<
  [BigNumber],
  StakingPeriodChangedEventObject
>;

export type StakingPeriodChangedEventFilter =
  TypedEventFilter<StakingPeriodChangedEvent>;

export interface TokensRecoveredEventObject {
  tokenAddress: string;
  amount: BigNumber;
}
export type TokensRecoveredEvent = TypedEvent<
  [string, BigNumber],
  TokensRecoveredEventObject
>;

export type TokensRecoveredEventFilter = TypedEventFilter<TokensRecoveredEvent>;

export interface WithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface GoldenStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldenStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      minimumStaking_: BigNumberish,
      stakingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedUntilBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumStaking(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumStaking(
      minimumStaking_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingPeriod(
      stakingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    minimumStaking_: BigNumberish,
    stakingPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedUntilBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minimumStaking(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumStaking(
    minimumStaking_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingPeriod(
    stakingPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      minimumStaking_: BigNumberish,
      stakingPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedUntilBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStaking(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMinimumStaking(
      minimumStaking_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingPeriod(
      stakingPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MinimumStakingChanged(uint256)"(
      minimumStaking?: null
    ): MinimumStakingChangedEventFilter;
    MinimumStakingChanged(
      minimumStaking?: null
    ): MinimumStakingChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Received(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      lockedUntil?: null
    ): ReceivedEventFilter;
    Received(
      account?: string | null,
      amount?: null,
      lockedUntil?: null
    ): ReceivedEventFilter;

    "StakingPeriodChanged(uint256)"(
      stakingPeriod?: null
    ): StakingPeriodChangedEventFilter;
    StakingPeriodChanged(stakingPeriod?: null): StakingPeriodChangedEventFilter;

    "TokensRecovered(address,uint256)"(
      tokenAddress?: null,
      amount?: null
    ): TokensRecoveredEventFilter;
    TokensRecovered(
      tokenAddress?: null,
      amount?: null
    ): TokensRecoveredEventFilter;

    "Withdrawn(address,uint256)"(
      account?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(account?: string | null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      minimumStaking_: BigNumberish,
      stakingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedUntilBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStaking(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumStaking(
      minimumStaking_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingPeriod(
      stakingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      minimumStaking_: BigNumberish,
      stakingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedUntilBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStaking(
      minimumStaking_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingPeriod(
      stakingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
