/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IGoldenStakingInterface extends utils.Interface {
  functions: {
    "deposit()": FunctionFragment;
    "getMinimumStaking()": FunctionFragment;
    "getStakingTime()": FunctionFragment;
    "setMinimumStaking(uint256)": FunctionFragment;
    "setStakingTime(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "getMinimumStaking"
      | "getStakingTime"
      | "setMinimumStaking"
      | "setStakingTime"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinimumStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStaking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256,uint256)": EventFragment;
    "MinimumStakingChanged(uint256)": EventFragment;
    "StakingTimeChanged(uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumStakingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface DepositedEventObject {
  account: string;
  amount: BigNumber;
  lockedUntil: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface MinimumStakingChangedEventObject {
  minimumStaking: BigNumber;
}
export type MinimumStakingChangedEvent = TypedEvent<
  [BigNumber],
  MinimumStakingChangedEventObject
>;

export type MinimumStakingChangedEventFilter =
  TypedEventFilter<MinimumStakingChangedEvent>;

export interface StakingTimeChangedEventObject {
  stakingTime: BigNumber;
}
export type StakingTimeChangedEvent = TypedEvent<
  [BigNumber],
  StakingTimeChangedEventObject
>;

export type StakingTimeChangedEventFilter =
  TypedEventFilter<StakingTimeChangedEvent>;

export interface WithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IGoldenStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGoldenStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinimumStaking(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinimumStaking(
      minimumStaking: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingTime(
      stakingTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinimumStaking(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingTime(overrides?: CallOverrides): Promise<BigNumber>;

  setMinimumStaking(
    minimumStaking: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingTime(
    stakingTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(overrides?: CallOverrides): Promise<void>;

    getMinimumStaking(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingTime(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumStaking(
      minimumStaking: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingTime(
      stakingTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposited(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      lockedUntil?: null
    ): DepositedEventFilter;
    Deposited(
      account?: string | null,
      amount?: null,
      lockedUntil?: null
    ): DepositedEventFilter;

    "MinimumStakingChanged(uint256)"(
      minimumStaking?: null
    ): MinimumStakingChangedEventFilter;
    MinimumStakingChanged(
      minimumStaking?: null
    ): MinimumStakingChangedEventFilter;

    "StakingTimeChanged(uint256)"(
      stakingTime?: null
    ): StakingTimeChangedEventFilter;
    StakingTimeChanged(stakingTime?: null): StakingTimeChangedEventFilter;

    "Withdrawn(address,uint256)"(
      account?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(account?: string | null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinimumStaking(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingTime(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumStaking(
      minimumStaking: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingTime(
      stakingTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinimumStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinimumStaking(
      minimumStaking: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingTime(
      stakingTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
