/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TransferRoleInterface extends utils.Interface {
  functions: {
    "addOwner(address)": FunctionFragment;
    "grantTransfer(address)": FunctionFragment;
    "hasGrantsToTransfer(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "revokeTransfer(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOwner"
      | "grantTransfer"
      | "hasGrantsToTransfer"
      | "isOwner"
      | "removeOwner"
      | "revokeTransfer"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "grantTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGrantsToTransfer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeTransfer",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGrantsToTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTransfer",
    data: BytesLike
  ): Result;

  events: {
    "OwnerAdded(address,address)": EventFragment;
    "OwnerRemoved(address,address)": EventFragment;
    "TransferGranted(address,address)": EventFragment;
    "TransferRevoked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRevoked"): EventFragment;
}

export interface OwnerAddedEventObject {
  addedOwner: string;
  addedBy: string;
}
export type OwnerAddedEvent = TypedEvent<
  [string, string],
  OwnerAddedEventObject
>;

export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;

export interface OwnerRemovedEventObject {
  removedOwner: string;
  removedBy: string;
}
export type OwnerRemovedEvent = TypedEvent<
  [string, string],
  OwnerRemovedEventObject
>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface TransferGrantedEventObject {
  grantedAddress: string;
  addedBy: string;
}
export type TransferGrantedEvent = TypedEvent<
  [string, string],
  TransferGrantedEventObject
>;

export type TransferGrantedEventFilter = TypedEventFilter<TransferGrantedEvent>;

export interface TransferRevokedEventObject {
  revokedAddress: string;
  revokedBy: string;
}
export type TransferRevokedEvent = TypedEvent<
  [string, string],
  TransferRevokedEventObject
>;

export type TransferRevokedEventFilter = TypedEventFilter<TransferRevokedEvent>;

export interface TransferRole extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransferRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantTransfer(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasGrantsToTransfer(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeTransfer(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOwner(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantTransfer(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasGrantsToTransfer(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  removeOwner(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeTransfer(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOwner(account: string, overrides?: CallOverrides): Promise<void>;

    grantTransfer(account: string, overrides?: CallOverrides): Promise<void>;

    hasGrantsToTransfer(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    removeOwner(account: string, overrides?: CallOverrides): Promise<void>;

    revokeTransfer(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnerAdded(address,address)"(
      addedOwner?: string | null,
      addedBy?: string | null
    ): OwnerAddedEventFilter;
    OwnerAdded(
      addedOwner?: string | null,
      addedBy?: string | null
    ): OwnerAddedEventFilter;

    "OwnerRemoved(address,address)"(
      removedOwner?: string | null,
      removedBy?: string | null
    ): OwnerRemovedEventFilter;
    OwnerRemoved(
      removedOwner?: string | null,
      removedBy?: string | null
    ): OwnerRemovedEventFilter;

    "TransferGranted(address,address)"(
      grantedAddress?: string | null,
      addedBy?: string | null
    ): TransferGrantedEventFilter;
    TransferGranted(
      grantedAddress?: string | null,
      addedBy?: string | null
    ): TransferGrantedEventFilter;

    "TransferRevoked(address,address)"(
      revokedAddress?: string | null,
      revokedBy?: string | null
    ): TransferRevokedEventFilter;
    TransferRevoked(
      revokedAddress?: string | null,
      revokedBy?: string | null
    ): TransferRevokedEventFilter;
  };

  estimateGas: {
    addOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantTransfer(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasGrantsToTransfer(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeTransfer(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantTransfer(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasGrantsToTransfer(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeTransfer(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
