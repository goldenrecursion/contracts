/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace GoldenBountyQuestion {
  export type AnswerPublicStruct = {
    answer: string;
    answerer: string;
    yesVoters: string[];
    noVoters: string[];
  };

  export type AnswerPublicStructOutput = [
    string,
    string,
    string[],
    string[]
  ] & {
    answer: string;
    answerer: string;
    yesVoters: string[];
    noVoters: string[];
  };
}

export interface GoldenBountyQuestionInterface extends utils.Interface {
  functions: {
    "acceptedAnswers()": FunctionFragment;
    "addAnswer(string)": FunctionFragment;
    "answers(uint8)": FunctionFragment;
    "answers()": FunctionFragment;
    "asker()": FunctionFragment;
    "bounty()": FunctionFragment;
    "owner()": FunctionFragment;
    "payout()": FunctionFragment;
    "pendingAnswers()": FunctionFragment;
    "predicateUUID()": FunctionFragment;
    "rejectedAnswers()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "subjectUUID()": FunctionFragment;
    "topAnswer()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptedAnswers"
      | "addAnswer"
      | "answers(uint8)"
      | "answers()"
      | "asker"
      | "bounty"
      | "owner"
      | "payout"
      | "pendingAnswers"
      | "predicateUUID"
      | "rejectedAnswers"
      | "renounceOwnership"
      | "subjectUUID"
      | "topAnswer"
      | "transferOwnership"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptedAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addAnswer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "answers(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "answers()", values?: undefined): string;
  encodeFunctionData(functionFragment: "asker", values?: undefined): string;
  encodeFunctionData(functionFragment: "bounty", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predicateUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectedAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subjectUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "topAnswer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "answers(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "answers()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predicateUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectedAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "AnswerAdded(bytes16,bytes16,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnswerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AnswerAddedEventObject {
  subjectUUID: string;
  predicateUUID: string;
  answer: string;
  index: BigNumber;
}
export type AnswerAddedEvent = TypedEvent<
  [string, string, string, BigNumber],
  AnswerAddedEventObject
>;

export type AnswerAddedEventFilter = TypedEventFilter<AnswerAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GoldenBountyQuestion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldenBountyQuestionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptedAnswers(
      overrides?: CallOverrides
    ): Promise<[GoldenBountyQuestion.AnswerPublicStructOutput[]]>;

    addAnswer(
      _answer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "answers(uint8)"(
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GoldenBountyQuestion.AnswerPublicStructOutput[]]>;

    "answers()"(
      overrides?: CallOverrides
    ): Promise<[GoldenBountyQuestion.AnswerPublicStructOutput[]]>;

    asker(overrides?: CallOverrides): Promise<[string]>;

    bounty(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingAnswers(
      overrides?: CallOverrides
    ): Promise<[GoldenBountyQuestion.AnswerPublicStructOutput[]]>;

    predicateUUID(overrides?: CallOverrides): Promise<[string]>;

    rejectedAnswers(
      overrides?: CallOverrides
    ): Promise<[GoldenBountyQuestion.AnswerPublicStructOutput[]]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subjectUUID(overrides?: CallOverrides): Promise<[string]>;

    topAnswer(
      overrides?: CallOverrides
    ): Promise<[GoldenBountyQuestion.AnswerPublicStructOutput]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      index: BigNumberish,
      isCorrect: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptedAnswers(
    overrides?: CallOverrides
  ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

  addAnswer(
    _answer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "answers(uint8)"(
    status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

  "answers()"(
    overrides?: CallOverrides
  ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

  asker(overrides?: CallOverrides): Promise<string>;

  bounty(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingAnswers(
    overrides?: CallOverrides
  ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

  predicateUUID(overrides?: CallOverrides): Promise<string>;

  rejectedAnswers(
    overrides?: CallOverrides
  ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subjectUUID(overrides?: CallOverrides): Promise<string>;

  topAnswer(
    overrides?: CallOverrides
  ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    index: BigNumberish,
    isCorrect: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptedAnswers(
      overrides?: CallOverrides
    ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

    addAnswer(_answer: string, overrides?: CallOverrides): Promise<void>;

    "answers(uint8)"(
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

    "answers()"(
      overrides?: CallOverrides
    ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

    asker(overrides?: CallOverrides): Promise<string>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payout(overrides?: CallOverrides): Promise<void>;

    pendingAnswers(
      overrides?: CallOverrides
    ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

    predicateUUID(overrides?: CallOverrides): Promise<string>;

    rejectedAnswers(
      overrides?: CallOverrides
    ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput[]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    subjectUUID(overrides?: CallOverrides): Promise<string>;

    topAnswer(
      overrides?: CallOverrides
    ): Promise<GoldenBountyQuestion.AnswerPublicStructOutput>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      index: BigNumberish,
      isCorrect: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AnswerAdded(bytes16,bytes16,string,uint256)"(
      subjectUUID?: null,
      predicateUUID?: null,
      answer?: null,
      index?: null
    ): AnswerAddedEventFilter;
    AnswerAdded(
      subjectUUID?: null,
      predicateUUID?: null,
      answer?: null,
      index?: null
    ): AnswerAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptedAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    addAnswer(
      _answer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "answers(uint8)"(
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "answers()"(overrides?: CallOverrides): Promise<BigNumber>;

    asker(overrides?: CallOverrides): Promise<BigNumber>;

    bounty(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    predicateUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rejectedAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subjectUUID(overrides?: CallOverrides): Promise<BigNumber>;

    topAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      index: BigNumberish,
      isCorrect: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedAnswers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAnswer(
      _answer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "answers(uint8)"(
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "answers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bounty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingAnswers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predicateUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectedAnswers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subjectUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    topAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      index: BigNumberish,
      isCorrect: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
