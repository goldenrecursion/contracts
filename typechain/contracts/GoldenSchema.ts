/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace GoldenSchema {
  export type PredicateStruct = {
    predicateID: BytesLike;
    latestCID: BytesLike;
  };

  export type PredicateStructOutput = [string, string] & {
    predicateID: string;
    latestCID: string;
  };
}

export interface GoldenSchemaInterface extends utils.Interface {
  functions: {
    "addPredicate(bytes16,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "predicateIDToLatestCID(bytes16)": FunctionFragment;
    "predicates()": FunctionFragment;
    "removePredicate(bytes16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePredicate(bytes16,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPredicate"
      | "owner"
      | "predicateIDToLatestCID"
      | "predicates"
      | "removePredicate"
      | "renounceOwnership"
      | "transferOwnership"
      | "updatePredicate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPredicate",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predicateIDToLatestCID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predicates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePredicate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePredicate",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPredicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predicateIDToLatestCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "predicates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePredicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePredicate",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PredicateAdded(bytes16,bytes32)": EventFragment;
    "PredicateRemoved(bytes16,bytes32)": EventFragment;
    "PredicateUpdated(bytes16,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredicateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredicateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredicateUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PredicateAddedEventObject {
  predicateID: string;
  latestCID: string;
}
export type PredicateAddedEvent = TypedEvent<
  [string, string],
  PredicateAddedEventObject
>;

export type PredicateAddedEventFilter = TypedEventFilter<PredicateAddedEvent>;

export interface PredicateRemovedEventObject {
  predicateID: string;
  latestCID: string;
}
export type PredicateRemovedEvent = TypedEvent<
  [string, string],
  PredicateRemovedEventObject
>;

export type PredicateRemovedEventFilter =
  TypedEventFilter<PredicateRemovedEvent>;

export interface PredicateUpdatedEventObject {
  predicateID: string;
  latestCID: string;
}
export type PredicateUpdatedEvent = TypedEvent<
  [string, string],
  PredicateUpdatedEventObject
>;

export type PredicateUpdatedEventFilter =
  TypedEventFilter<PredicateUpdatedEvent>;

export interface GoldenSchema extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldenSchemaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    predicateIDToLatestCID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    predicates(
      overrides?: CallOverrides
    ): Promise<[GoldenSchema.PredicateStructOutput[]]>;

    removePredicate(
      predicateID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPredicate(
    predicateID: BytesLike,
    predicateCID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  predicateIDToLatestCID(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  predicates(
    overrides?: CallOverrides
  ): Promise<GoldenSchema.PredicateStructOutput[]>;

  removePredicate(
    predicateID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePredicate(
    predicateID: BytesLike,
    predicateCID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    predicateIDToLatestCID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    predicates(
      overrides?: CallOverrides
    ): Promise<GoldenSchema.PredicateStructOutput[]>;

    removePredicate(
      predicateID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PredicateAdded(bytes16,bytes32)"(
      predicateID?: BytesLike | null,
      latestCID?: BytesLike | null
    ): PredicateAddedEventFilter;
    PredicateAdded(
      predicateID?: BytesLike | null,
      latestCID?: BytesLike | null
    ): PredicateAddedEventFilter;

    "PredicateRemoved(bytes16,bytes32)"(
      predicateID?: BytesLike | null,
      latestCID?: BytesLike | null
    ): PredicateRemovedEventFilter;
    PredicateRemoved(
      predicateID?: BytesLike | null,
      latestCID?: BytesLike | null
    ): PredicateRemovedEventFilter;

    "PredicateUpdated(bytes16,bytes32)"(
      predicateID?: BytesLike | null,
      latestCID?: BytesLike | null
    ): PredicateUpdatedEventFilter;
    PredicateUpdated(
      predicateID?: BytesLike | null,
      latestCID?: BytesLike | null
    ): PredicateUpdatedEventFilter;
  };

  estimateGas: {
    addPredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    predicateIDToLatestCID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predicates(overrides?: CallOverrides): Promise<BigNumber>;

    removePredicate(
      predicateID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predicateIDToLatestCID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predicates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePredicate(
      predicateID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePredicate(
      predicateID: BytesLike,
      predicateCID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
