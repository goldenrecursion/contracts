/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GoldenSchema, GoldenSchemaInterface } from "../GoldenSchema";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "initialPredicates",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "initialEntityTypes",
        type: "bytes32[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "entityType",
            type: "bytes32",
          },
          {
            internalType: "bytes32[]",
            name: "predicates",
            type: "bytes32[]",
          },
        ],
        internalType: "struct GoldenSchema.PredicatesByEntityType[]",
        name: "initialPredicatesByEntityTypes",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "EntityTypeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
    ],
    name: "EntityTypePredicateAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
    ],
    name: "EntityTypePredicateRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "EntityTypeRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
    ],
    name: "PredicateAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
    ],
    name: "PredicateRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "addEntityType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
    ],
    name: "addPredicate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "addPredicateToEntityType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "entityTypes",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "predicates",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "predicatesByEntityType",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "predicatesByEntityTypes",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "entityType",
            type: "bytes32",
          },
          {
            internalType: "bytes32[]",
            name: "predicates",
            type: "bytes32[]",
          },
        ],
        internalType: "struct GoldenSchema.PredicatesByEntityType[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "removeEntityType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
    ],
    name: "removePredicate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "predicateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "entityTypeHash",
        type: "bytes32",
      },
    ],
    name: "removePredicateFromEntityType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001367380380620013678339810160408190526200003491620005d7565b6200003f33620001c0565b825160005b818110156200008f576200007a85828151811062000066576200006662000721565b60200260200101516200021060201b60201c565b80620000868162000737565b91505062000044565b50825160005b81811015620000e057620000cb858281518110620000b757620000b762000721565b6020026020010151620002a860201b60201c565b80620000d78162000737565b91505062000095565b5060005b8351811015620001b45760005b84828151811062000106576200010662000721565b602002602001015160200151518110156200019e576200018985838151811062000134576200013462000721565b602002602001015160200151828151811062000154576200015462000721565b602002602001015186848151811062000171576200017162000721565b6020026020010151600001516200033c60201b60201c565b80620001958162000737565b915050620000f1565b5080620001ab8162000737565b915050620000e4565b50505050505062000761565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200025f5760405162461bcd60e51b815260206004820181905260248201526000805160206200134783398151915260448201526064015b60405180910390fd5b6200027a816001620003df60201b620007251790919060201c565b60405181907f861ddf969065dab5e3d00961153b8197311a93f6890b0298abf34e20d660014490600090a250565b6000546001600160a01b03163314620002f35760405162461bcd60e51b8152602060048201819052602482015260008051602062001347833981519152604482015260640162000256565b6200030e816003620003df60201b620007251790919060201c565b60405181907f06d04668acd3c44e9a36f63c64fd0dbb0dd603b66a5edb804659874f71cdb24f90600090a250565b6000546001600160a01b03163314620003875760405162461bcd60e51b8152602060048201819052602482015260008051602062001347833981519152604482015260640162000256565b6000818152600560209081526040909120620003ae91849062000725620003df821b17901c565b604051829082907f794a3ca56219acf3700accb9e0c6c51e7606e4c53ecabdb49cd79dd59e44048690600090a35050565b620003eb828262000476565b156200044d5760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920616c726561647920657869737473206960448201526937103a34329039b2ba1760b11b606482015260840162000256565b600180830180546000848152602095865260408120829055928101825590825292902090910155565b60018201546000906200048c57506000620004c4565b6000828152602084905260409020546001840180548492908110620004b557620004b562000721565b90600052602060002001541490505b92915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620005055762000505620004ca565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620005365762000536620004ca565b604052919050565b60006001600160401b038211156200055a576200055a620004ca565b5060051b60200190565b600082601f8301126200057657600080fd5b815160206200058f62000589836200053e565b6200050b565b82815260059290921b84018101918181019086841115620005af57600080fd5b8286015b84811015620005cc5780518352918301918301620005b3565b509695505050505050565b600080600060608486031215620005ed57600080fd5b83516001600160401b03808211156200060557600080fd5b620006138783880162000564565b94506020915081860151818111156200062b57600080fd5b620006398882890162000564565b9450506040860151818111156200064f57600080fd5b8601601f810188136200066157600080fd5b80516200067262000589826200053e565b81815260059190911b8201840190848101908a8311156200069257600080fd5b8584015b838110156200071057805186811115620006b05760008081fd5b85016040818e03601f19011215620006c85760008081fd5b620006d2620004e0565b888201518152604082015188811115620006ec5760008081fd5b620006fc8f8b8386010162000564565b828b01525084525091860191860162000696565b508096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200075a57634e487b7160e01b600052601160045260246000fd5b5060010190565b610bd680620007716000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80634b41d6141161008c5780638da5cb5b116100665780638da5cb5b14610175578063ddc63bd614610190578063eff1d1a6146101a3578063f2fde38b146101b857600080fd5b80634b41d6141461014757806352878b9f1461015a578063715018a61461016d57600080fd5b806257557a146100d357806302748999146100e85780632562e43b146100fb578063262e3ee4146101195780633c3efab41461012c57806345c03aea14610134575b600080fd5b6100e66100e1366004610992565b6101cb565b005b6100e66100f6366004610992565b610237565b61010361029a565b60405161011091906109ab565b60405180910390f35b6100e6610127366004610992565b6102f5565b610103610358565b6100e66101423660046109ef565b6103b0565b6100e66101553660046109ef565b610423565b6100e6610168366004610992565b610496565b6100e66104f9565b6000546040516001600160a01b039091168152602001610110565b61010361019e366004610992565b61052f565b6101ab610594565b6040516101109190610a11565b6100e66101c6366004610ab1565b61068a565b6000546001600160a01b031633146101fe5760405162461bcd60e51b81526004016101f590610ae1565b60405180910390fd5b610209600182610725565b60405181907f861ddf969065dab5e3d00961153b8197311a93f6890b0298abf34e20d660014490600090a250565b6000546001600160a01b031633146102615760405162461bcd60e51b81526004016101f590610ae1565b61026c6003826107b8565b60405181907f33d97f5dd98d9dc69687ca079a2f2a7c17901e627b5138c736ed3678e087035690600090a250565b606060036001018054806020026020016040519081016040528092919081815260200182805480156102eb57602002820191906000526020600020905b8154815260200190600101908083116102d7575b5050505050905090565b6000546001600160a01b0316331461031f5760405162461bcd60e51b81526004016101f590610ae1565b61032a6001826107b8565b60405181907fe17caf08eb3e60a9ed23324be261100e63ed91d7c6a58942a22a145ebf605a2b90600090a250565b6060600180018054806020026020016040519081016040528092919081815260200182805480156102eb57602002820191906000526020600020908154815260200190600101908083116102d7575050505050905090565b6000546001600160a01b031633146103da5760405162461bcd60e51b81526004016101f590610ae1565b60008181526005602052604090206103f29083610725565b604051829082907f794a3ca56219acf3700accb9e0c6c51e7606e4c53ecabdb49cd79dd59e44048690600090a35050565b6000546001600160a01b0316331461044d5760405162461bcd60e51b81526004016101f590610ae1565b600081815260056020526040902061046590836107b8565b604051829082907f525ec1993286bce7793f4c2ef272cdf20c2f9d3145199934782fda3c057d98b690600090a35050565b6000546001600160a01b031633146104c05760405162461bcd60e51b81526004016101f590610ae1565b6104cb600382610725565b60405181907f06d04668acd3c44e9a36f63c64fd0dbb0dd603b66a5edb804659874f71cdb24f90600090a250565b6000546001600160a01b031633146105235760405162461bcd60e51b81526004016101f590610ae1565b61052d60006108f3565b565b60008181526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561058857602002820191906000526020600020905b815481526020019060010190808311610574575b50505050509050919050565b60045460609060009067ffffffffffffffff8111156105b5576105b5610b16565b6040519080825280602002602001820160405280156105fb57816020015b6040805180820190915260008152606060208201528152602001906001900390816105d35790505b50905060005b6004548110156106845760006003600101828154811061062357610623610b2c565b90600052602060002001549050600061063b8261052f565b905060405180604001604052808381526020018281525084848151811061066457610664610b2c565b60200260200101819052505050808061067c90610b58565b915050610601565b50919050565b6000546001600160a01b031633146106b45760405162461bcd60e51b81526004016101f590610ae1565b6001600160a01b0381166107195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f5565b610722816108f3565b50565b61072f8282610943565b1561078f5760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920616c726561647920657869737473206960448201526937103a34329039b2ba1760b11b60648201526084016101f5565b600180830180546000848152602095865260408120829055928101825590825292902090910155565b6107c28282610943565b6108215760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920646f6573206e6f74206578697374206960448201526937103a34329039b2ba1760b11b60648201526084016101f5565b60006001610830846001015490565b61083a9190610b73565b6000838152602085905260409020549091508082146108b557600084600101838154811061086a5761086a610b2c565b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106108a7576108a7610b2c565b600091825260209091200155505b600083815260208590526040812055600184018054806108d7576108d7610b8a565b6001900381819060005260206000200160009055905550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60018201546000906109575750600061098c565b600082815260208490526040902054600184018054849290811061097d5761097d610b2c565b90600052602060002001541490505b92915050565b6000602082840312156109a457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156109e3578351835292840192918401916001016109c7565b50909695505050505050565b60008060408385031215610a0257600080fd5b50508035926020909101359150565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610aa257898403603f19018652825180518552880151888501889052805188860181905290890190839060608701905b80831015610a8d5783518252928b019260019290920191908b0190610a6d565b50978a01979550505091870191600101610a39565b50919998505050505050505050565b600060208284031215610ac357600080fd5b81356001600160a01b0381168114610ada57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b6c57610b6c610b42565b5060010190565b600082821015610b8557610b85610b42565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204a3f5ec7020a4d0b25d45bf8ebf33039dfc51ab4587ca7fac20a0653315547d764736f6c634300080b00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572";

export class GoldenSchema__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    initialPredicates: BytesLike[],
    initialEntityTypes: BytesLike[],
    initialPredicatesByEntityTypes: {
      entityType: BytesLike;
      predicates: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GoldenSchema> {
    return super.deploy(
      initialPredicates,
      initialEntityTypes,
      initialPredicatesByEntityTypes,
      overrides || {}
    ) as Promise<GoldenSchema>;
  }
  getDeployTransaction(
    initialPredicates: BytesLike[],
    initialEntityTypes: BytesLike[],
    initialPredicatesByEntityTypes: {
      entityType: BytesLike;
      predicates: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      initialPredicates,
      initialEntityTypes,
      initialPredicatesByEntityTypes,
      overrides || {}
    );
  }
  attach(address: string): GoldenSchema {
    return super.attach(address) as GoldenSchema;
  }
  connect(signer: Signer): GoldenSchema__factory {
    return super.connect(signer) as GoldenSchema__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GoldenSchemaInterface {
    return new utils.Interface(_abi) as GoldenSchemaInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GoldenSchema {
    return new Contract(address, _abi, signerOrProvider) as GoldenSchema;
  }
}
