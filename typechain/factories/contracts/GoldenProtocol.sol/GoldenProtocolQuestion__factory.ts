/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GoldenProtocolQuestion,
  GoldenProtocolQuestionInterface,
} from "../../../contracts/GoldenProtocol.sol/GoldenProtocolQuestion";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_asker",
        type: "address",
      },
      {
        internalType: "bytes16",
        name: "_subjectUUID",
        type: "bytes16",
      },
      {
        internalType: "bytes16",
        name: "_predicateUUID",
        type: "bytes16",
      },
      {
        internalType: "uint256",
        name: "_bounty",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_answer",
        type: "string",
      },
    ],
    name: "addAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "answer",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "answers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "answerer",
            type: "address",
          },
          {
            internalType: "string",
            name: "answer",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct GoldenProtocolQuestion.Answer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "asker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bounty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "answerer",
        type: "address",
      },
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "hashAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "predicateUUID",
    outputs: [
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "subjectUUID",
    outputs: [
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "topAnswer",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "answerer",
            type: "address",
          },
          {
            internalType: "string",
            name: "answer",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct GoldenProtocolQuestion.Answer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "upvote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200144e3803806200144e83398101604081905262000034916200015f565b6200003f33620000f1565b6001600160a01b038416620000b45760405162461bcd60e51b815260206004820152603160248201527f476f6c64656e50726f746f636f6c5175657374696f6e3a2061736b657220697360448201527020746865207a65726f206164647265737360781b606482015260840160405180910390fd5b600180546001600160a01b039095166001600160a01b031990951694909417909355608090811c600160801b0291901c17600355600255620001be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160801b0319811681146200015a57600080fd5b919050565b600080600080608085870312156200017657600080fd5b84516001600160a01b03811681146200018e57600080fd5b93506200019e6020860162000141565b9250620001ae6040860162000141565b6060959095015193969295505050565b61128080620001ce6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806388fae0e91161008c578063bbe0ba8511610066578063bbe0ba85146101d4578063c7a66eb3146101e8578063e1145e4b146101fb578063f2fde38b1461021057600080fd5b806388fae0e9146101915780638da5cb5b146101a6578063943dfef1146101cb57600080fd5b8063715018a6116100c8578063715018a6146101325780637a2faee01461013a57806385bb7d691461016957806388775d8f1461017e57600080fd5b806301ddf070146100ef578063366b2baa1461010457806363bd1d4a1461012a575b600080fd5b6101026100fd366004610ced565b610223565b005b610117610112366004610d38565b61037e565b6040519081526020015b60405180910390f35b6101026103b5565b610102610554565b6003546101479060801b81565b6040516fffffffffffffffffffffffffffffffff199091168152602001610121565b610171610568565b6040516101219190610e40565b61010261018c366004610e5a565b6105f6565b610199610695565b6040516101219190610f07565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610121565b61011760025481565b60035461014790600160801b900460801b81565b6001546101b3906001600160a01b031681565b61020361080f565b6040516101219190610f1a565b61010261021e366004610f7c565b6109d0565b600654811061029f5760405162461bcd60e51b815260206004820152603860248201527f476f6c64656e50726f746f636f6c5175657374696f6e3a20746865726520697360448201527f206e6f20616e73776572206174207468617420696e646578000000000000000060648201526084015b60405180910390fd5b336000908152600a6020526040902054156103135760405162461bcd60e51b815260206004820152602e60248201527f476f6c64656e50726f746f636f6c5175657374696f6e3a20796f75206861766560448201526d08185b1c9958591e481d9bdd195960921b6064820152608401610296565b6000610320600583610a49565b6001600160a01b0381166000908152600b60205260408120805492935033926001929061034e908490610fad565b90915550506001600160a01b0381166000908152600a60205260409020839055610379600782610a7c565b505050565b60008282604051602001610393929190610fc0565b6040516020818303038152906040528051906020012060001c90505b92915050565b6001546001600160a01b031633146104195760405162461bcd60e51b815260206004820152602160248201527f476f6c64656e50726f746f636f6c5175657374696f6e3a206f6e6c7941736b656044820152603960f91b6064820152608401610296565b6000610423610695565b9050806040015161043c6000546001600160a01b031690565b6001600160a01b0316636407e0d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d9190610fec565b11156105085760405162461bcd60e51b815260206004820152603460248201527f476f6c64656e50726f746f636f6c5175657374696f6e3a207061796f75743a206044820152731b5a5b9a5b5d5b559bdd195cc81b9bdd081b595d60621b6064820152608401610296565b602081015160049061051a9082611087565b5080516002546040516001600160a01b0383169180156108fc02916000818181858888f19350505050158015610379573d6000803e3d6000fd5b61055c610a98565b6105666000610af2565b565b6004805461057590611005565b80601f01602080910402602001604051908101604052809291908181526020018280546105a190611005565b80156105ee5780601f106105c3576101008083540402835291602001916105ee565b820191906000526020600020905b8154815290600101906020018083116105d157829003601f168201915b505050505081565b806106535760405162461bcd60e51b815260206004820152602760248201527f476f6c64656e50726f746f636f6c5175657374696f6e3a20616e7377657220696044820152667320656d70747960c81b6064820152608401610296565b33600081815260096020526040902061066d838583611147565b50610679600582610a7c565b6001600160a01b03166000908152600b60205260408120555050565b6106c2604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b60008060005b600654811015610726576000600b816106e2600585610a49565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050838110610713578093508192505b508061071e81611208565b9150506106c8565b506000610734600583610a49565b90506040518060600160405280826001600160a01b0316815260200160096000846001600160a01b03166001600160a01b03168152602001908152602001600020805461078090611005565b80601f01602080910402602001604051908101604052809291908181526020018280546107ac90611005565b80156107f95780601f106107ce576101008083540402835291602001916107f9565b820191906000526020600020905b8154815290600101906020018083116107dc57829003601f168201915b5050505050815260200184815250935050505090565b60065460609060009067ffffffffffffffff81111561083057610830610d22565b60405190808252806020026020018201604052801561088e57816020015b61087b604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b81526020019060019003908161084e5790505b50905060005b6006548110156109ca5760006108ab600583610a49565b90506040518060600160405280826001600160a01b0316815260200160096000846001600160a01b03166001600160a01b0316815260200190815260200160002080546108f790611005565b80601f016020809104026020016040519081016040528092919081815260200182805461092390611005565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b50505091835250506001600160a01b0383166000908152600b602090815260409091205491015283518490849081106109ab576109ab611221565b60200260200101819052505080806109c290611208565b915050610894565b50919050565b6109d8610a98565b6001600160a01b038116610a3d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610296565b610a4681610af2565b50565b6000826001018281548110610a6057610a60611221565b6000918252602090912001546001600160a01b03169392505050565b610a868282610b42565b610a9457610a948282610ba5565b5050565b6000546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610296565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60018201546000908103610b58575060006103af565b6001600160a01b0382166000818152602085905260409020546001850180549091908110610b8857610b88611221565b6000918252602090912001546001600160a01b0316149392505050565b6001600160a01b038116610c0c5760405162461bcd60e51b815260206004820152602860248201527f556e6f7264657265644b65795365742831303029202d204b65792063616e6e6f604482015267074206265203078360c41b6064820152608401610296565b610c168282610b42565b15610c955760405162461bcd60e51b815260206004820152604360248201527f556e6f726465726564416464726573735365742831303129202d20416464726560448201527f737320286b65792920616c72656164792065786973747320696e20746865207360648201526232ba1760e91b608482015260a401610296565b6001828101805480830182556000828152602090200180546001600160a01b0319166001600160a01b03851617905554610ccf9190611237565b6001600160a01b039091166000908152602092909252604090912055565b600060208284031215610cff57600080fd5b5035919050565b80356001600160a01b0381168114610d1d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610d4b57600080fd5b610d5483610d06565b9150602083013567ffffffffffffffff80821115610d7157600080fd5b818501915085601f830112610d8557600080fd5b813581811115610d9757610d97610d22565b604051601f8201601f19908116603f01168101908382118183101715610dbf57610dbf610d22565b81604052828152886020848701011115610dd857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b81811015610e2057602081850181015186830182015201610e04565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610e536020830184610dfa565b9392505050565b60008060208385031215610e6d57600080fd5b823567ffffffffffffffff80821115610e8557600080fd5b818501915085601f830112610e9957600080fd5b813581811115610ea857600080fd5b866020828501011115610eba57600080fd5b60209290920196919550909350505050565b60018060a01b0381511682526000602082015160606020850152610ef36060850182610dfa565b604093840151949093019390935250919050565b602081526000610e536020830184610ecc565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f6f57603f19888603018452610f5d858351610ecc565b94509285019290850190600101610f41565b5092979650505050505050565b600060208284031215610f8e57600080fd5b610e5382610d06565b634e487b7160e01b600052601160045260246000fd5b808201808211156103af576103af610f97565b6001600160a01b0383168152604060208201819052600090610fe490830184610dfa565b949350505050565b600060208284031215610ffe57600080fd5b5051919050565b600181811c9082168061101957607f821691505b6020821081036109ca57634e487b7160e01b600052602260045260246000fd5b601f82111561037957600081815260208120601f850160051c810160208610156110605750805b601f850160051c820191505b8181101561107f5782815560010161106c565b505050505050565b815167ffffffffffffffff8111156110a1576110a1610d22565b6110b5816110af8454611005565b84611039565b602080601f8311600181146110ea57600084156110d25750858301515b600019600386901b1c1916600185901b17855561107f565b600085815260208120601f198616915b82811015611119578886015182559484019460019091019084016110fa565b50858210156111375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83111561115f5761115f610d22565b6111738361116d8354611005565b83611039565b6000601f8411600181146111a7576000851561118f5750838201355b600019600387901b1c1916600186901b178355611201565b600083815260209020601f19861690835b828110156111d857868501358255602094850194600190920191016111b8565b50868210156111f55760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60006001820161121a5761121a610f97565b5060010190565b634e487b7160e01b600052603260045260246000fd5b818103818111156103af576103af610f9756fea264697066735822122015ad514b97df38df80bc6e0db0581076104830cdb35fd709485f7877380c98f664736f6c63430008100033";

type GoldenProtocolQuestionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GoldenProtocolQuestionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GoldenProtocolQuestion__factory extends ContractFactory {
  constructor(...args: GoldenProtocolQuestionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _asker: string,
    _subjectUUID: BytesLike,
    _predicateUUID: BytesLike,
    _bounty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GoldenProtocolQuestion> {
    return super.deploy(
      _asker,
      _subjectUUID,
      _predicateUUID,
      _bounty,
      overrides || {}
    ) as Promise<GoldenProtocolQuestion>;
  }
  override getDeployTransaction(
    _asker: string,
    _subjectUUID: BytesLike,
    _predicateUUID: BytesLike,
    _bounty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _asker,
      _subjectUUID,
      _predicateUUID,
      _bounty,
      overrides || {}
    );
  }
  override attach(address: string): GoldenProtocolQuestion {
    return super.attach(address) as GoldenProtocolQuestion;
  }
  override connect(signer: Signer): GoldenProtocolQuestion__factory {
    return super.connect(signer) as GoldenProtocolQuestion__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GoldenProtocolQuestionInterface {
    return new utils.Interface(_abi) as GoldenProtocolQuestionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GoldenProtocolQuestion {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GoldenProtocolQuestion;
  }
}
