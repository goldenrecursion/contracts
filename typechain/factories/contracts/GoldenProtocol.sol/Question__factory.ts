/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Question,
  QuestionInterface,
} from "../../../contracts/GoldenProtocol.sol/Question";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_asker",
        type: "address",
      },
      {
        internalType: "bytes16",
        name: "_subjectUUID",
        type: "bytes16",
      },
      {
        internalType: "bytes16",
        name: "_predicateUUID",
        type: "bytes16",
      },
      {
        internalType: "uint256",
        name: "_bounty",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_answer",
        type: "string",
      },
    ],
    name: "addAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "answers",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "answerer",
        type: "address",
      },
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "hashAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "payout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "topAnswer",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "answerer",
            type: "address",
          },
          {
            internalType: "string",
            name: "answer",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct Question.Answer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "upvote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votes",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ed1380380610ed183398101604081905261002f916100af565b600080546001600160a01b039687166001600160a01b0319918216179091556001805495909616941693909317909355608092831c600160801b02921c9190911760035560025561010d565b80516001600160a01b038116811461009257600080fd5b919050565b80516001600160801b03198116811461009257600080fd5b600080600080600060a086880312156100c757600080fd5b6100d08661007b565b94506100de6020870161007b565b93506100ec60408701610097565b92506100fa60608701610097565b9150608086015190509295509295909350565b610db58061011c6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806388775d8f1161005b57806388775d8f146100c557806388fae0e9146100d8578063e1145e4b146100ed578063e168c3ec1461010257600080fd5b806301ddf07014610082578063366b2baa1461009757806363bd1d4a146100bd575b600080fd5b6100956100903660046108eb565b610117565b005b6100aa6100a536600461091a565b610182565b6040519081526020015b60405180910390f35b6100956101b9565b6100956100d33660046109ea565b61032a565b6100e061036c565b6040516100b49190610aa2565b6100f56104e6565b6040516100b49190610ae6565b61010a610638565b6040516100b49190610b48565b60006101246005836106f1565b6001600160a01b0381166000908152600b602052604081208054929350339260019290610152908490610ba2565b90915550506001600160a01b0381166000908152600a6020526040902083905561017d600782610724565b505050565b60008282604051602001610197929190610bb5565b6040516020818303038152906040528051906020012060001c90505b92915050565b6001546001600160a01b0316331461020e5760405162461bcd60e51b815260206004820152601360248201527228bab2b9ba34b7b71d1037b7363ca0b9b5b2b960691b60448201526064015b60405180910390fd5b600061021861036c565b6000546040808301518151631901f83560e21b815291519394506001600160a01b03909216928391636407e0d49160048083019260209291908290030181865afa15801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190610be1565b11156102eb5760405162461bcd60e51b815260206004820152602660248201527f5175657374696f6e3a207061796f75743a206d696e696d756d566f746573206e6044820152651bdd081b595d60d21b6064820152608401610205565b81516002546040516001600160a01b0383169180156108fc02916000818181858888f19350505050158015610324573d6000803e3d6000fd5b50505050565b336000818152600960205260409020610344838583610c7c565b50610350600582610724565b6001600160a01b03166000908152600b60205260408120555050565b610399604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b60008060005b6006548110156103fd576000600b816103b96005856106f1565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508381106103ea578093508192505b50806103f581610d3d565b91505061039f565b50600061040b6005836106f1565b90506040518060600160405280826001600160a01b0316815260200160096000846001600160a01b03166001600160a01b03168152602001908152602001600020805461045790610bfa565b80601f016020809104026020016040519081016040528092919081815260200182805461048390610bfa565b80156104d05780601f106104a5576101008083540402835291602001916104d0565b820191906000526020600020905b8154815290600101906020018083116104b357829003601f168201915b5050505050815260200184815250935050505090565b60065460609060009067ffffffffffffffff81111561050757610507610904565b60405190808252806020026020018201604052801561053a57816020015b60608152602001906001900390816105255790505b50905060005b60065481101561063257600960006105596005846106f1565b6001600160a01b03166001600160a01b03168152602001908152602001600020805461058490610bfa565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090610bfa565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b505050505082828151811061061457610614610d56565b6020026020010181905250808061062a90610d3d565b915050610540565b50919050565b60065460609060009067ffffffffffffffff81111561065957610659610904565b604051908082528060200260200182016040528015610682578160200160208202803683370190505b50905060005b60065481101561063257600b60006106a16005846106f1565b6001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106106d4576106d4610d56565b6020908102919091010152806106e981610d3d565b915050610688565b600082600101828154811061070857610708610d56565b6000918252602090912001546001600160a01b03169392505050565b61072e8282610740565b61073c5761073c82826107a3565b5050565b60018201546000908103610756575060006101b3565b6001600160a01b038216600081815260208590526040902054600185018054909190811061078657610786610d56565b6000918252602090912001546001600160a01b0316149392505050565b6001600160a01b03811661080a5760405162461bcd60e51b815260206004820152602860248201527f556e6f7264657265644b65795365742831303029202d204b65792063616e6e6f604482015267074206265203078360c41b6064820152608401610205565b6108148282610740565b156108935760405162461bcd60e51b815260206004820152604360248201527f556e6f726465726564416464726573735365742831303129202d20416464726560448201527f737320286b65792920616c72656164792065786973747320696e20746865207360648201526232ba1760e91b608482015260a401610205565b6001828101805480830182556000828152602090200180546001600160a01b0319166001600160a01b038516179055546108cd9190610d6c565b6001600160a01b039091166000908152602092909252604090912055565b6000602082840312156108fd57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561092d57600080fd5b82356001600160a01b038116811461094457600080fd5b9150602083013567ffffffffffffffff8082111561096157600080fd5b818501915085601f83011261097557600080fd5b81358181111561098757610987610904565b604051601f8201601f19908116603f011681019083821181831017156109af576109af610904565b816040528281528860208487010111156109c857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080602083850312156109fd57600080fd5b823567ffffffffffffffff80821115610a1557600080fd5b818501915085601f830112610a2957600080fd5b813581811115610a3857600080fd5b866020828501011115610a4a57600080fd5b60209290920196919550909350505050565b6000815180845260005b81811015610a8257602081850181015186830182015201610a66565b506000602082860101526020601f19601f83011685010191505092915050565b602080825282516001600160a01b03168282015282015160606040830152600090610ad06080840182610a5c565b9050604084015160608401528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b3b57603f19888603018452610b29858351610a5c565b94509285019290850190600101610b0d565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b8057835183529284019291840191600101610b64565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156101b3576101b3610b8c565b6001600160a01b0383168152604060208201819052600090610bd990830184610a5c565b949350505050565b600060208284031215610bf357600080fd5b5051919050565b600181811c90821680610c0e57607f821691505b60208210810361063257634e487b7160e01b600052602260045260246000fd5b601f82111561017d57600081815260208120601f850160051c81016020861015610c555750805b601f850160051c820191505b81811015610c7457828155600101610c61565b505050505050565b67ffffffffffffffff831115610c9457610c94610904565b610ca883610ca28354610bfa565b83610c2e565b6000601f841160018114610cdc5760008515610cc45750838201355b600019600387901b1c1916600186901b178355610d36565b600083815260209020601f19861690835b82811015610d0d5786850135825560209485019460019092019101610ced565b5086821015610d2a5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060018201610d4f57610d4f610b8c565b5060010190565b634e487b7160e01b600052603260045260246000fd5b818103818111156101b3576101b3610b8c56fea2646970667358221220894181ef21cbda37f611438fab04dda65242216f7a6d9f4bbe881068cda0363e64736f6c63430008100033";

type QuestionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuestionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Question__factory extends ContractFactory {
  constructor(...args: QuestionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: string,
    _asker: string,
    _subjectUUID: BytesLike,
    _predicateUUID: BytesLike,
    _bounty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Question> {
    return super.deploy(
      _owner,
      _asker,
      _subjectUUID,
      _predicateUUID,
      _bounty,
      overrides || {}
    ) as Promise<Question>;
  }
  override getDeployTransaction(
    _owner: string,
    _asker: string,
    _subjectUUID: BytesLike,
    _predicateUUID: BytesLike,
    _bounty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _asker,
      _subjectUUID,
      _predicateUUID,
      _bounty,
      overrides || {}
    );
  }
  override attach(address: string): Question {
    return super.attach(address) as Question;
  }
  override connect(signer: Signer): Question__factory {
    return super.connect(signer) as Question__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuestionInterface {
    return new utils.Interface(_abi) as QuestionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Question {
    return new Contract(address, _abi, signerOrProvider) as Question;
  }
}
