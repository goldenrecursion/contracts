/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GoldenStaking,
  GoldenStakingInterface,
} from "../../../contracts/staking/GoldenStaking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minimumStaking",
        type: "uint256",
      },
    ],
    name: "MinimumStakingChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedUntil",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "stakingTime",
        type: "uint256",
      },
    ],
    name: "StakingTimeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensRecovered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumStaking_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakingTime_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lockedUntilTimes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumStaking",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumStaking_",
        type: "uint256",
      },
    ],
    name: "setMinimumStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakingTime_",
        type: "uint256",
      },
    ],
    name: "setStakingTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610aab806100206000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146102685780639e8c708e14610290578063b643aa92146102b0578063d479ed71146102dd578063e4a30116146102f3578063f2fde38b1461031357600080fd5b8063146d4574146101a657806327e235e3146101cf578063386172f3146101fc5780633ccfd60b1461021e578063583daf6e14610233578063715018a61461025357600080fd5b366101a157336000818152606560205260409020543490156101085760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e4819195c1bdcda5d1959607a1b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152606560205260408120805483929061013090849061095d565b9091555050606854600090610145904261095d565b6001600160a01b038416600090815260666020908152604091829020839055815134815290810183905291925033917f74cf3d18d0ddca79038197ad0dd2c7fa5005ef61a5d1ed190e8a8a437e2fcf10910160405180910390a2005b600080fd5b3480156101b257600080fd5b506101bc60685481565b6040519081526020015b60405180910390f35b3480156101db57600080fd5b506101bc6101ea366004610984565b60656020526000908152604090205481565b34801561020857600080fd5b5061021c6102173660046109b4565b610333565b005b34801561022a57600080fd5b5061021c610377565b34801561023f57600080fd5b5061021c61024e3660046109b4565b610522565b34801561025f57600080fd5b5061021c61055f565b34801561027457600080fd5b506033546040516001600160a01b0390911681526020016101c6565b34801561029c57600080fd5b5061021c6102ab366004610984565b610573565b3480156102bc57600080fd5b506101bc6102cb366004610984565b60666020526000908152604090205481565b3480156102e957600080fd5b506101bc60675481565b3480156102ff57600080fd5b5061021c61030e3660046109cd565b6106c5565b34801561031f57600080fd5b5061021c61032e366004610984565b6107de565b61033b610857565b60688190556040518181527fcc9542961b896e927244c20381944233a49a46b5f40b792741ee34dab74880cb906020015b60405180910390a150565b336000818152606560205260409020546103c85760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016100ff565b6001600160a01b038116600090815260666020526040902054421161042f5760405162461bcd60e51b815260206004820152601960248201527f4c6f636b2074696d6520686173206e6f7420657870697265640000000000000060448201526064016100ff565b6001600160a01b038116600081815260656020526040808220805490839055905190929083908381818185875af1925050503d806000811461048d576040519150601f19603f3d011682016040523d82523d6000602084013e610492565b606091505b50509050806104da5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321032ba3432b960611b60448201526064016100ff565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161051591815260200190565b60405180910390a2505050565b61052a610857565b60678190556040518181527f5760a1f06604eac3c83c17c630047ffd012e8ba1c01634f0978ad54cf6dcd7b19060200161036c565b610567610857565b61057160006108b1565b565b61057b610857565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156105c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e891906109ef565b9050816001600160a01b031663a9059cbb61060b6033546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610a08565b50604080516001600160a01b0385168152602081018390527f46d2e6e71fc567877b817ff3d940571f989d4ee4d40f2b70806d36e738feef6f91015b60405180910390a1505050565b600054610100900460ff16158080156106e55750600054600160ff909116105b806106ff5750303b1580156106ff575060005460ff166001145b6107625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016100ff565b6000805460ff191660011790558015610785576000805461ff0019166101001790555b61078d610903565b6067839055606882905580156107d9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106b8565b505050565b6107e6610857565b6001600160a01b03811661084b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ff565b610854816108b1565b50565b6033546001600160a01b031633146105715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100ff565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661092a5760405162461bcd60e51b81526004016100ff90610a2a565b610571600054610100900460ff166109545760405162461bcd60e51b81526004016100ff90610a2a565b610571336108b1565b8082018082111561097e57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561099657600080fd5b81356001600160a01b03811681146109ad57600080fd5b9392505050565b6000602082840312156109c657600080fd5b5035919050565b600080604083850312156109e057600080fd5b50508035926020909101359150565b600060208284031215610a0157600080fd5b5051919050565b600060208284031215610a1a57600080fd5b815180151581146109ad57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b60fe03904dda0313aad66a6c199d0fc0e7ac242335cd0d358c66150024f46e064736f6c63430008100033";

type GoldenStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GoldenStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GoldenStaking__factory extends ContractFactory {
  constructor(...args: GoldenStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GoldenStaking> {
    return super.deploy(overrides || {}) as Promise<GoldenStaking>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GoldenStaking {
    return super.attach(address) as GoldenStaking;
  }
  override connect(signer: Signer): GoldenStaking__factory {
    return super.connect(signer) as GoldenStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GoldenStakingInterface {
    return new utils.Interface(_abi) as GoldenStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GoldenStaking {
    return new Contract(address, _abi, signerOrProvider) as GoldenStaking;
  }
}
