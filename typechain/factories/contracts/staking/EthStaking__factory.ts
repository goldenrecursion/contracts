/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EthStaking,
  EthStakingInterface,
} from "../../../contracts/staking/EthStaking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minimumStaking",
        type: "uint256",
      },
    ],
    name: "MinimumStakingChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedUntil",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "stakingPeriod",
        type: "uint256",
      },
    ],
    name: "StakingPeriodChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensRecovered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumStaking_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakingPeriod_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lockedUntilBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumStaking",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumStaking_",
        type: "uint256",
      },
    ],
    name: "setMinimumStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakingPeriod_",
        type: "uint256",
      },
    ],
    name: "setStakingPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac5806100206000396000f3fe6080604052600436106100ab5760003560e01c8063957d778011610064578063957d77801461029a5780639e8c708e146102ba578063c03d5b47146102da578063d479ed71146102f0578063e4a3011614610306578063f2fde38b1461032657600080fd5b806327e235e3146101b95780633ccfd60b146101f957806351229f1614610210578063583daf6e1461023d578063715018a61461025d5780638da5cb5b1461027257600080fd5b366101b457336000818152606560205260409020546067543491906100d08284610977565b101561011b5760405162461bcd60e51b815260206004820152601560248201527426b4b71029ba30b5b4b733903b34b7b630ba34b7b760591b60448201526064015b60405180910390fd5b6001600160a01b03831660009081526065602052604081208054849290610143908490610977565b90915550506068546000906101589043610977565b6001600160a01b038516600081815260666020908152604091829020849055815187815290810184905292935090917f74cf3d18d0ddca79038197ad0dd2c7fa5005ef61a5d1ed190e8a8a437e2fcf10910160405180910390a2005b600080fd5b3480156101c557600080fd5b506101e66101d436600461099e565b60656020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561020557600080fd5b5061020e610346565b005b34801561021c57600080fd5b506101e661022b36600461099e565b60666020526000908152604090205481565b34801561024957600080fd5b5061020e6102583660046109ce565b6104be565b34801561026957600080fd5b5061020e610502565b34801561027e57600080fd5b506033546040516001600160a01b0390911681526020016101f0565b3480156102a657600080fd5b5061020e6102b53660046109ce565b610516565b3480156102c657600080fd5b5061020e6102d536600461099e565b610553565b3480156102e657600080fd5b506101e660685481565b3480156102fc57600080fd5b506101e660675481565b34801561031257600080fd5b5061020e6103213660046109e7565b6106e4565b34801561033257600080fd5b5061020e61034136600461099e565b6107f8565b33600081815260656020526040902054806103905760405162461bcd60e51b815260206004820152600a602482015269139bdd0814dd185ad95960b21b6044820152606401610112565b6001600160a01b03821660009081526066602052604090205443116103f75760405162461bcd60e51b815260206004820152601960248201527f4c6f636b2074696d6520686173206e6f742065787069726564000000000000006044820152606401610112565b6001600160a01b03821660008181526065602052604080822091909155517f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906104449084815260200190565b60405180910390a26040516000906001600160a01b0384169083156108fc0290849084818181858888f193505050509050806104b95760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321032ba3432b960611b6044820152606401610112565b505050565b6104c6610871565b60678190556040518181527f5760a1f06604eac3c83c17c630047ffd012e8ba1c01634f0978ad54cf6dcd7b1906020015b60405180910390a150565b61050a610871565b61051460006108cb565b565b61051e610871565b60688190556040518181527f0637078273a6ae66b3e557bfdec66084fbec260f11eb57e920f7007c241be947906020016104f7565b61055b610871565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190610a09565b9050816001600160a01b031663a9059cbb6105eb6033546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c9190610a22565b61069c5760405162461bcd60e51b81526020600482015260116024820152702330b4b632b2103a37903932b1b7bb32b960791b6044820152606401610112565b604080516001600160a01b0385168152602081018390527f46d2e6e71fc567877b817ff3d940571f989d4ee4d40f2b70806d36e738feef6f91015b60405180910390a1505050565b600054610100900460ff16158080156107045750600054600160ff909116105b8061071e5750303b15801561071e575060005460ff166001145b6107815760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610112565b6000805460ff1916600117905580156107a4576000805461ff0019166101001790555b6107ac61091d565b6067839055606882905580156104b9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106d7565b610800610871565b6001600160a01b0381166108655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610112565b61086e816108cb565b50565b6033546001600160a01b031633146105145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610112565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166109445760405162461bcd60e51b815260040161011290610a44565b610514600054610100900460ff1661096e5760405162461bcd60e51b815260040161011290610a44565b610514336108cb565b8082018082111561099857634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156109b057600080fd5b81356001600160a01b03811681146109c757600080fd5b9392505050565b6000602082840312156109e057600080fd5b5035919050565b600080604083850312156109fa57600080fd5b50508035926020909101359150565b600060208284031215610a1b57600080fd5b5051919050565b600060208284031215610a3457600080fd5b815180151581146109c757600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212203aa4a8d401e0e0b9d9baa2d82c7227ea99f5cd349c2906eabd692cd2cb1833de64736f6c63430008100033";

type EthStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EthStaking__factory extends ContractFactory {
  constructor(...args: EthStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EthStaking> {
    return super.deploy(overrides || {}) as Promise<EthStaking>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EthStaking {
    return super.attach(address) as EthStaking;
  }
  override connect(signer: Signer): EthStaking__factory {
    return super.connect(signer) as EthStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthStakingInterface {
    return new utils.Interface(_abi) as EthStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EthStaking {
    return new Contract(address, _abi, signerOrProvider) as EthStaking;
  }
}
