/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EthStaking,
  EthStakingInterface,
} from "../../../contracts/staking/EthStaking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minimumStaking",
        type: "uint256",
      },
    ],
    name: "MinimumStakingChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedUntil",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "stakingPeriod",
        type: "uint256",
      },
    ],
    name: "StakingPeriodChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensRecovered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumStaking_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakingPeriod_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lockedUntilBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumStaking",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumStaking_",
        type: "uint256",
      },
    ],
    name: "setMinimumStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakingPeriod_",
        type: "uint256",
      },
    ],
    name: "setStakingPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610aad806100206000396000f3fe6080604052600436106100ab5760003560e01c8063957d778011610064578063957d7780146102825780639e8c708e146102a2578063c03d5b47146102c2578063d479ed71146102d8578063e4a30116146102ee578063f2fde38b1461030e57600080fd5b806327e235e3146101a15780633ccfd60b146101e157806351229f16146101f8578063583daf6e14610225578063715018a6146102455780638da5cb5b1461025a57600080fd5b3661019c57606754339034908110156101035760405162461bcd60e51b815260206004820152601560248201527426b4b71029ba30b5b4b733903b34b7b630ba34b7b760591b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152606560205260408120805483929061012b90849061095f565b9091555050606854600090610140904361095f565b6001600160a01b038416600081815260666020908152604091829020849055815186815290810184905292935090917f74cf3d18d0ddca79038197ad0dd2c7fa5005ef61a5d1ed190e8a8a437e2fcf10910160405180910390a2005b600080fd5b3480156101ad57600080fd5b506101ce6101bc366004610986565b60656020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101ed57600080fd5b506101f661032e565b005b34801561020457600080fd5b506101ce610213366004610986565b60666020526000908152604090205481565b34801561023157600080fd5b506101f66102403660046109b6565b6104a6565b34801561025157600080fd5b506101f66104ea565b34801561026657600080fd5b506033546040516001600160a01b0390911681526020016101d8565b34801561028e57600080fd5b506101f661029d3660046109b6565b6104fe565b3480156102ae57600080fd5b506101f66102bd366004610986565b61053b565b3480156102ce57600080fd5b506101ce60685481565b3480156102e457600080fd5b506101ce60675481565b3480156102fa57600080fd5b506101f66103093660046109cf565b6106cc565b34801561031a57600080fd5b506101f6610329366004610986565b6107e0565b33600081815260656020526040902054806103785760405162461bcd60e51b815260206004820152600a602482015269139bdd0814dd185ad95960b21b60448201526064016100fa565b6001600160a01b03821660009081526066602052604090205443116103df5760405162461bcd60e51b815260206004820152601960248201527f4c6f636b2074696d6520686173206e6f7420657870697265640000000000000060448201526064016100fa565b6001600160a01b03821660008181526065602052604080822091909155517f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59061042c9084815260200190565b60405180910390a26040516000906001600160a01b0384169083156108fc0290849084818181858888f193505050509050806104a15760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321032ba3432b960611b60448201526064016100fa565b505050565b6104ae610859565b60678190556040518181527f5760a1f06604eac3c83c17c630047ffd012e8ba1c01634f0978ad54cf6dcd7b1906020015b60405180910390a150565b6104f2610859565b6104fc60006108b3565b565b610506610859565b60688190556040518181527f0637078273a6ae66b3e557bfdec66084fbec260f11eb57e920f7007c241be947906020016104df565b610543610859565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b091906109f1565b9050816001600160a01b031663a9059cbb6105d36033546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190610a0a565b6106845760405162461bcd60e51b81526020600482015260116024820152702330b4b632b2103a37903932b1b7bb32b960791b60448201526064016100fa565b604080516001600160a01b0385168152602081018390527f46d2e6e71fc567877b817ff3d940571f989d4ee4d40f2b70806d36e738feef6f91015b60405180910390a1505050565b600054610100900460ff16158080156106ec5750600054600160ff909116105b806107065750303b158015610706575060005460ff166001145b6107695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016100fa565b6000805460ff19166001179055801561078c576000805461ff0019166101001790555b610794610905565b6067839055606882905580156104a1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106bf565b6107e8610859565b6001600160a01b03811661084d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100fa565b610856816108b3565b50565b6033546001600160a01b031633146104fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100fa565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661092c5760405162461bcd60e51b81526004016100fa90610a2c565b6104fc600054610100900460ff166109565760405162461bcd60e51b81526004016100fa90610a2c565b6104fc336108b3565b8082018082111561098057634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561099857600080fd5b81356001600160a01b03811681146109af57600080fd5b9392505050565b6000602082840312156109c857600080fd5b5035919050565b600080604083850312156109e257600080fd5b50508035926020909101359150565b600060208284031215610a0357600080fd5b5051919050565b600060208284031215610a1c57600080fd5b815180151581146109af57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122046ac7ce0d433ac55bbab0c8e47e1aab61d960e0492ed67abe33e8127b60558a064736f6c63430008100033";

type EthStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EthStaking__factory extends ContractFactory {
  constructor(...args: EthStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EthStaking> {
    return super.deploy(overrides || {}) as Promise<EthStaking>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EthStaking {
    return super.attach(address) as EthStaking;
  }
  override connect(signer: Signer): EthStaking__factory {
    return super.connect(signer) as EthStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthStakingInterface {
    return new utils.Interface(_abi) as EthStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EthStaking {
    return new Contract(address, _abi, signerOrProvider) as EthStaking;
  }
}
