/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingV1Storage,
  StakingV1StorageInterface,
} from "../../../../../contracts/state-channel/staking/StakingStorage.sol/StakingV1Storage";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "agreements",
    outputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "commitAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pricePerVoteMultiplier",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isClosed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "lockedStake",
    outputs: [
      {
        internalType: "uint256",
        name: "lockedAmount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isUnlocked",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxPricePerVote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumPricePerVote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061023d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630844f7851461006757806309dfff3d14610083578063402914f51461008c5780634eab2dd4146100ac5780639e1f68c7146100f6578063fc7e286d14610166575b600080fd5b61007060005481565b6040519081526020015b60405180910390f35b61007060015481565b61007061009a3660046101a2565b60056020526000908152604090205481565b6100e16100ba3660046101c4565b60046020908152600092835260408084209091529082529020805460019091015460ff1682565b6040805192835290151560208301520161007a565b61013a6101043660046101ee565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b0390911692919060ff1684565b604080516001600160a01b0390951685526020850193909352918301521515606082015260800161007a565b6100706101743660046101a2565b60036020526000908152604090205481565b80356001600160a01b038116811461019d57600080fd5b919050565b6000602082840312156101b457600080fd5b6101bd82610186565b9392505050565b600080604083850312156101d757600080fd5b6101e083610186565b946020939093013593505050565b60006020828403121561020057600080fd5b503591905056fea2646970667358221220c61cfc38574a5df1be53055d55a54ea19777be603f1cbc0caffd4708123617cf64736f6c63430008100033";

type StakingV1StorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingV1StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingV1Storage__factory extends ContractFactory {
  constructor(...args: StakingV1StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingV1Storage> {
    return super.deploy(overrides || {}) as Promise<StakingV1Storage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StakingV1Storage {
    return super.attach(address) as StakingV1Storage;
  }
  override connect(signer: Signer): StakingV1Storage__factory {
    return super.connect(signer) as StakingV1Storage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingV1StorageInterface {
    return new utils.Interface(_abi) as StakingV1StorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingV1Storage {
    return new Contract(address, _abi, signerOrProvider) as StakingV1Storage;
  }
}
