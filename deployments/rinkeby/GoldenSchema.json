{
  "address": "0xfC32E125A415E3410c34B28c5bbE1294df347F4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "initialPredicates",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "initialEntityTypes",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityType",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "predicates",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct GoldenSchema.PredicatesByEntityType[]",
          "name": "initialPredicatesByEntityTypes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "entityTypeHash",
          "type": "bytes32"
        }
      ],
      "name": "addEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "predicateHash",
          "type": "bytes32"
        }
      ],
      "name": "addPredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "predicateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "entityTypeHash",
          "type": "bytes32"
        }
      ],
      "name": "addPredicateToEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entityTypes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predicates",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "entityTypeHash",
          "type": "bytes32"
        }
      ],
      "name": "predicatesByEntityType",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predicatesByEntityTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityType",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "predicates",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct GoldenSchema.PredicatesByEntityType[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "entityTypeHash",
          "type": "bytes32"
        }
      ],
      "name": "removeEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "predicateHash",
          "type": "bytes32"
        }
      ],
      "name": "removePredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "predicateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "entityTypeHash",
          "type": "bytes32"
        }
      ],
      "name": "removePredicateFromEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6242cf2cc321bf227db5f0d8c5c876bccd32d7fd729f323ef88b4c39dc83cb38",
  "receipt": {
    "to": null,
    "from": "0xB9563F6aEd9a3986Fe0e4B57cA1Af40dBD7F7720",
    "contractAddress": "0xfC32E125A415E3410c34B28c5bbE1294df347F4E",
    "transactionIndex": 12,
    "gasUsed": "699778",
    "logsBloom": "0x
    "blockHash": "0xb395af25dd41b1a1c779085184ef573c4e661a626146b353e008f94347f921af",
    "transactionHash": "0x6242cf2cc321bf227db5f0d8c5c876bccd32d7fd729f323ef88b4c39dc83cb38",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10732588,
        "transactionHash": "0x6242cf2cc321bf227db5f0d8c5c876bccd32d7fd729f323ef88b4c39dc83cb38",
        "address": "0xfC32E125A415E3410c34B28c5bbE1294df347F4E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b9563f6aed9a3986fe0e4b57ca1af40dbd7f7720"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xb395af25dd41b1a1c779085184ef573c4e661a626146b353e008f94347f921af"
      }
    ],
    "blockNumber": 10732588,
    "cumulativeGasUsed": "4647723",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [],
    [],
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "35496840f9badeac66299bf01147a47a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"initialPredicates\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"initialEntityTypes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"predicates\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct GoldenSchema.PredicatesByEntityType[]\",\"name\":\"initialPredicatesByEntityTypes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"entityTypeHash\",\"type\":\"bytes32\"}],\"name\":\"addEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"predicateHash\",\"type\":\"bytes32\"}],\"name\":\"addPredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"predicateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"entityTypeHash\",\"type\":\"bytes32\"}],\"name\":\"addPredicateToEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityTypes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predicates\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"entityTypeHash\",\"type\":\"bytes32\"}],\"name\":\"predicatesByEntityType\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predicatesByEntityTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"predicates\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct GoldenSchema.PredicatesByEntityType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"entityTypeHash\",\"type\":\"bytes32\"}],\"name\":\"removeEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"predicateHash\",\"type\":\"bytes32\"}],\"name\":\"removePredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"predicateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"entityTypeHash\",\"type\":\"bytes32\"}],\"name\":\"removePredicateFromEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@golden.com\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GoldenSchema.sol\":\"GoldenSchema\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/GoldenSchema.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './libraries/Bytes32Set.sol';\\n\\n/// @custom:security-contact security@golden.com\\ncontract GoldenSchema is Ownable {\\n    // More info on storig IPFS hashes as bytes32:\\n    // https://ethereum.stackexchange.com/a/17112/90609\\n    using Bytes32Set for Bytes32Set.Set;\\n    Bytes32Set.Set _predicates;\\n    Bytes32Set.Set _entityTypes;\\n    mapping(bytes32 => Bytes32Set.Set) _predicatesByEntityType;\\n\\n    struct PredicatesByEntityType {\\n        bytes32 entityType;\\n        bytes32[] predicates;\\n    }\\n\\n    constructor(\\n        bytes32[] memory initialPredicates,\\n        bytes32[] memory initialEntityTypes,\\n        PredicatesByEntityType[] memory initialPredicatesByEntityTypes\\n    ) Ownable() {\\n        uint256 predicateCount = initialPredicates.length;\\n        for (uint256 i = 0; i < predicateCount; i++) {\\n            addPredicate(initialPredicates[i]);\\n        }\\n\\n        uint256 entityTypesCount = initialEntityTypes.length;\\n        for (uint256 i = 0; i < entityTypesCount; i++) {\\n            addEntityType(initialEntityTypes[i]);\\n        }\\n\\n        for (uint256 i = 0; i < initialPredicatesByEntityTypes.length; i++) {\\n            for (\\n                uint256 j = 0;\\n                j < initialPredicatesByEntityTypes[i].predicates.length;\\n                j++\\n            ) {\\n                addPredicateToEntityType(\\n                    initialPredicatesByEntityTypes[i].predicates[j],\\n                    initialPredicatesByEntityTypes[i].entityType\\n                );\\n            }\\n        }\\n    }\\n\\n    function predicates() public view returns (bytes32[] memory) {\\n        return _predicates.keyList;\\n    }\\n\\n    function addPredicate(bytes32 predicateHash) public onlyOwner {\\n        _predicates.insert(predicateHash);\\n    }\\n\\n    function removePredicate(bytes32 predicateHash) public onlyOwner {\\n        _predicates.remove(predicateHash);\\n    }\\n\\n    function entityTypes() public view returns (bytes32[] memory) {\\n        return _entityTypes.keyList;\\n    }\\n\\n    function addEntityType(bytes32 entityTypeHash) public onlyOwner {\\n        _entityTypes.insert(entityTypeHash);\\n    }\\n\\n    function removeEntityType(bytes32 entityTypeHash) public onlyOwner {\\n        _entityTypes.remove(entityTypeHash);\\n    }\\n\\n    function predicatesByEntityType(bytes32 entityTypeHash)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _predicatesByEntityType[entityTypeHash].keyList;\\n    }\\n\\n    function predicatesByEntityTypes()\\n        public\\n        view\\n        returns (PredicatesByEntityType[] memory)\\n    {\\n        PredicatesByEntityType[]\\n            memory _predicatesByEntityTypes = new PredicatesByEntityType[](\\n                _entityTypes.keyList.length\\n            );\\n\\n        for (uint256 i = 0; i < _entityTypes.keyList.length; i++) {\\n            bytes32 entityTypeHash = _entityTypes.keyList[i];\\n            bytes32[] memory entityTypePredicates = predicatesByEntityType(\\n                entityTypeHash\\n            );\\n            _predicatesByEntityTypes[i] = PredicatesByEntityType(\\n                entityTypeHash,\\n                entityTypePredicates\\n            );\\n        }\\n\\n        return _predicatesByEntityTypes;\\n    }\\n\\n    function addPredicateToEntityType(\\n        bytes32 predicateHash,\\n        bytes32 entityTypeHash\\n    ) public onlyOwner {\\n        _predicatesByEntityType[entityTypeHash].insert(predicateHash);\\n    }\\n\\n    function removePredicateFromEntityType(\\n        bytes32 predicateHash,\\n        bytes32 entityTypeHash\\n    ) public onlyOwner {\\n        _predicatesByEntityType[entityTypeHash].remove(predicateHash);\\n    }\\n}\\n\",\"keccak256\":\"0xc9a65b7aa621f3964c03b482d06a36a1df006db95d6ed5f20450997c84404d8a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Bytes32Set.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\n// Inspired by: https://github.com/rob-Hitchens/SetTypes\\n\\nlibrary Bytes32Set {\\n    struct Set {\\n        mapping(bytes32 => uint256) keyPointers;\\n        bytes32[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, bytes32 key) internal {\\n        require(\\n            !exists(self, key),\\n            'Bytes32Set: key already exists in the set.'\\n        );\\n        self.keyPointers[key] = self.keyList.length;\\n        self.keyList.push(key);\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, bytes32 key) internal {\\n        require(\\n            exists(self, key),\\n            'Bytes32Set: key does not exist in the set.'\\n        );\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            bytes32 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, bytes32 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return self.keyList[index];\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n}\\n\",\"keccak256\":\"0xd964ba963f164570b1f223436424409c63ca8bdcd86a1974f88514424bc31a5c\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011cb380380620011cb833981016040819052620000349162000551565b6200003f33620001c0565b825160005b818110156200008f576200007a8582815181106200006657620000666200069b565b60200260200101516200021060201b60201c565b806200008681620006b1565b91505062000044565b50825160005b81811015620000e057620000cb858281518110620000b757620000b76200069b565b60200260200101516200027d60201b60201c565b80620000d781620006b1565b91505062000095565b5060005b8351811015620001b45760005b8482815181106200010657620001066200069b565b602002602001015160200151518110156200019e57620001898583815181106200013457620001346200069b565b60200260200101516020015182815181106200015457620001546200069b565b60200260200101518684815181106200017157620001716200069b565b602002602001015160000151620002e360201b60201c565b806200019581620006b1565b915050620000f1565b5080620001ab81620006b1565b915050620000e4565b505050505050620006db565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200025f5760405162461bcd60e51b81526020600482018190526024820152600080516020620011ab83398151915260448201526064015b60405180910390fd5b6200027a8160016200035960201b6200060f1790919060201c565b50565b6000546001600160a01b03163314620002c85760405162461bcd60e51b81526020600482018190526024820152600080516020620011ab833981519152604482015260640162000256565b6200027a8160036200035960201b6200060f1790919060201c565b6000546001600160a01b031633146200032e5760405162461bcd60e51b81526020600482018190526024820152600080516020620011ab833981519152604482015260640162000256565b6000818152600560209081526040909120620003559184906200060f62000359821b17901c565b5050565b620003658282620003f0565b15620003c75760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920616c726561647920657869737473206960448201526937103a34329039b2ba1760b11b606482015260840162000256565b600180830180546000848152602095865260408120829055928101825590825292902090910155565b600182015460009062000406575060006200043e565b60008281526020849052604090205460018401805484929081106200042f576200042f6200069b565b90600052602060002001541490505b92915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156200047f576200047f62000444565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004b057620004b062000444565b604052919050565b60006001600160401b03821115620004d457620004d462000444565b5060051b60200190565b600082601f830112620004f057600080fd5b81516020620005096200050383620004b8565b62000485565b82815260059290921b840181019181810190868411156200052957600080fd5b8286015b848110156200054657805183529183019183016200052d565b509695505050505050565b6000806000606084860312156200056757600080fd5b83516001600160401b03808211156200057f57600080fd5b6200058d87838801620004de565b9450602091508186015181811115620005a557600080fd5b620005b388828901620004de565b945050604086015181811115620005c957600080fd5b8601601f81018813620005db57600080fd5b8051620005ec6200050382620004b8565b81815260059190911b8201840190848101908a8311156200060c57600080fd5b8584015b838110156200068a578051868111156200062a5760008081fd5b85016040818e03601f19011215620006425760008081fd5b6200064c6200045a565b888201518152604082015188811115620006665760008081fd5b620006768f8b83860101620004de565b828b01525084525091860191860162000610565b508096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620006d457634e487b7160e01b600052601160045260246000fd5b5060010190565b610ac080620006eb6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80634b41d6141161008c5780638da5cb5b116100665780638da5cb5b14610175578063ddc63bd614610190578063eff1d1a6146101a3578063f2fde38b146101b857600080fd5b80634b41d6141461014757806352878b9f1461015a578063715018a61461016d57600080fd5b806257557a146100d357806302748999146100e85780632562e43b146100fb578063262e3ee4146101195780633c3efab41461012c57806345c03aea14610134575b600080fd5b6100e66100e136600461087c565b6101cb565b005b6100e66100f636600461087c565b61020c565b610103610241565b6040516101109190610895565b60405180910390f35b6100e661012736600461087c565b61029c565b6101036102d1565b6100e66101423660046108d9565b610329565b6100e66101553660046108d9565b61036f565b6100e661016836600461087c565b6103b1565b6100e66103e6565b6000546040516001600160a01b039091168152602001610110565b61010361019e36600461087c565b61041c565b6101ab610481565b60405161011091906108fb565b6100e66101c636600461099b565b610577565b6000546001600160a01b031633146101fe5760405162461bcd60e51b81526004016101f5906109cb565b60405180910390fd5b61020960018261060f565b50565b6000546001600160a01b031633146102365760405162461bcd60e51b81526004016101f5906109cb565b6102096003826106a2565b6060600360010180548060200260200160405190810160405280929190818152602001828054801561029257602002820191906000526020600020905b81548152602001906001019080831161027e575b5050505050905090565b6000546001600160a01b031633146102c65760405162461bcd60e51b81526004016101f5906109cb565b6102096001826106a2565b606060018001805480602002602001604051908101604052809291908181526020018280548015610292576020028201919060005260206000209081548152602001906001019080831161027e575050505050905090565b6000546001600160a01b031633146103535760405162461bcd60e51b81526004016101f5906109cb565b600081815260056020526040902061036b908361060f565b5050565b6000546001600160a01b031633146103995760405162461bcd60e51b81526004016101f5906109cb565b600081815260056020526040902061036b90836106a2565b6000546001600160a01b031633146103db5760405162461bcd60e51b81526004016101f5906109cb565b61020960038261060f565b6000546001600160a01b031633146104105760405162461bcd60e51b81526004016101f5906109cb565b61041a60006107dd565b565b60008181526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561047557602002820191906000526020600020905b815481526020019060010190808311610461575b50505050509050919050565b60045460609060009067ffffffffffffffff8111156104a2576104a2610a00565b6040519080825280602002602001820160405280156104e857816020015b6040805180820190915260008152606060208201528152602001906001900390816104c05790505b50905060005b6004548110156105715760006003600101828154811061051057610510610a16565b9060005260206000200154905060006105288261041c565b905060405180604001604052808381526020018281525084848151811061055157610551610a16565b60200260200101819052505050808061056990610a42565b9150506104ee565b50919050565b6000546001600160a01b031633146105a15760405162461bcd60e51b81526004016101f5906109cb565b6001600160a01b0381166106065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f5565b610209816107dd565b610619828261082d565b156106795760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920616c726561647920657869737473206960448201526937103a34329039b2ba1760b11b60648201526084016101f5565b600180830180546000848152602095865260408120829055928101825590825292902090910155565b6106ac828261082d565b61070b5760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920646f6573206e6f74206578697374206960448201526937103a34329039b2ba1760b11b60648201526084016101f5565b6000600161071a846001015490565b6107249190610a5d565b60008381526020859052604090205490915080821461079f57600084600101838154811061075457610754610a16565b9060005260206000200154905081856000016000838152602001908152602001600020819055508085600101838154811061079157610791610a16565b600091825260209091200155505b600083815260208590526040812055600184018054806107c1576107c1610a74565b6001900381819060005260206000200160009055905550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600182015460009061084157506000610876565b600082815260208490526040902054600184018054849290811061086757610867610a16565b90600052602060002001541490505b92915050565b60006020828403121561088e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156108cd578351835292840192918401916001016108b1565b50909695505050505050565b600080604083850312156108ec57600080fd5b50508035926020909101359150565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561098c57898403603f19018652825180518552880151888501889052805188860181905290890190839060608701905b808310156109775783518252928b019260019290920191908b0190610957565b50978a01979550505091870191600101610923565b50919998505050505050505050565b6000602082840312156109ad57600080fd5b81356001600160a01b03811681146109c457600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610a5657610a56610a2c565b5060010190565b600082821015610a6f57610a6f610a2c565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122050e73fc6a3c09e552e5f2872eeea3e463c65cb9ea0fba2e43d38030695dbc1df64736f6c634300080b00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c80634b41d6141161008c5780638da5cb5b116100665780638da5cb5b14610175578063ddc63bd614610190578063eff1d1a6146101a3578063f2fde38b146101b857600080fd5b80634b41d6141461014757806352878b9f1461015a578063715018a61461016d57600080fd5b806257557a146100d357806302748999146100e85780632562e43b146100fb578063262e3ee4146101195780633c3efab41461012c57806345c03aea14610134575b600080fd5b6100e66100e136600461087c565b6101cb565b005b6100e66100f636600461087c565b61020c565b610103610241565b6040516101109190610895565b60405180910390f35b6100e661012736600461087c565b61029c565b6101036102d1565b6100e66101423660046108d9565b610329565b6100e66101553660046108d9565b61036f565b6100e661016836600461087c565b6103b1565b6100e66103e6565b6000546040516001600160a01b039091168152602001610110565b61010361019e36600461087c565b61041c565b6101ab610481565b60405161011091906108fb565b6100e66101c636600461099b565b610577565b6000546001600160a01b031633146101fe5760405162461bcd60e51b81526004016101f5906109cb565b60405180910390fd5b61020960018261060f565b50565b6000546001600160a01b031633146102365760405162461bcd60e51b81526004016101f5906109cb565b6102096003826106a2565b6060600360010180548060200260200160405190810160405280929190818152602001828054801561029257602002820191906000526020600020905b81548152602001906001019080831161027e575b5050505050905090565b6000546001600160a01b031633146102c65760405162461bcd60e51b81526004016101f5906109cb565b6102096001826106a2565b606060018001805480602002602001604051908101604052809291908181526020018280548015610292576020028201919060005260206000209081548152602001906001019080831161027e575050505050905090565b6000546001600160a01b031633146103535760405162461bcd60e51b81526004016101f5906109cb565b600081815260056020526040902061036b908361060f565b5050565b6000546001600160a01b031633146103995760405162461bcd60e51b81526004016101f5906109cb565b600081815260056020526040902061036b90836106a2565b6000546001600160a01b031633146103db5760405162461bcd60e51b81526004016101f5906109cb565b61020960038261060f565b6000546001600160a01b031633146104105760405162461bcd60e51b81526004016101f5906109cb565b61041a60006107dd565b565b60008181526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561047557602002820191906000526020600020905b815481526020019060010190808311610461575b50505050509050919050565b60045460609060009067ffffffffffffffff8111156104a2576104a2610a00565b6040519080825280602002602001820160405280156104e857816020015b6040805180820190915260008152606060208201528152602001906001900390816104c05790505b50905060005b6004548110156105715760006003600101828154811061051057610510610a16565b9060005260206000200154905060006105288261041c565b905060405180604001604052808381526020018281525084848151811061055157610551610a16565b60200260200101819052505050808061056990610a42565b9150506104ee565b50919050565b6000546001600160a01b031633146105a15760405162461bcd60e51b81526004016101f5906109cb565b6001600160a01b0381166106065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f5565b610209816107dd565b610619828261082d565b156106795760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920616c726561647920657869737473206960448201526937103a34329039b2ba1760b11b60648201526084016101f5565b600180830180546000848152602095865260408120829055928101825590825292902090910155565b6106ac828261082d565b61070b5760405162461bcd60e51b815260206004820152602a60248201527f427974657333325365743a206b657920646f6573206e6f74206578697374206960448201526937103a34329039b2ba1760b11b60648201526084016101f5565b6000600161071a846001015490565b6107249190610a5d565b60008381526020859052604090205490915080821461079f57600084600101838154811061075457610754610a16565b9060005260206000200154905081856000016000838152602001908152602001600020819055508085600101838154811061079157610791610a16565b600091825260209091200155505b600083815260208590526040812055600184018054806107c1576107c1610a74565b6001900381819060005260206000200160009055905550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600182015460009061084157506000610876565b600082815260208490526040902054600184018054849290811061086757610867610a16565b90600052602060002001541490505b92915050565b60006020828403121561088e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156108cd578351835292840192918401916001016108b1565b50909695505050505050565b600080604083850312156108ec57600080fd5b50508035926020909101359150565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561098c57898403603f19018652825180518552880151888501889052805188860181905290890190839060608701905b808310156109775783518252928b019260019290920191908b0190610957565b50978a01979550505091870191600101610923565b50919998505050505050505050565b6000602082840312156109ad57600080fd5b81356001600160a01b03811681146109c457600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610a5657610a56610a2c565b5060010190565b600082821015610a6f57610a6f610a2c565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122050e73fc6a3c09e552e5f2872eeea3e463c65cb9ea0fba2e43d38030695dbc1df64736f6c634300080b0033",
  "devdoc": {
    "custom:security-contact": "security@golden.com",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6163,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_predicates",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Set)6795_storage"
      },
      {
        "astId": 6166,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_entityTypes",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Set)6795_storage"
      },
      {
        "astId": 6171,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_predicatesByEntityType",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Set)6795_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Set)6795_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Bytes32Set.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)6795_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)6795_storage": {
        "encoding": "inplace",
        "label": "struct Bytes32Set.Set",
        "members": [
          {
            "astId": 6791,
            "contract": "contracts/GoldenSchema.sol:GoldenSchema",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 6794,
            "contract": "contracts/GoldenSchema.sol:GoldenSchema",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}