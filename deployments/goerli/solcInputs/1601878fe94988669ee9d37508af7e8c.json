{
  "language": "Solidity",
  "sources": {
    "contracts/GoldenSchema.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport './libraries/Bytes16Set.sol';\n\n/// @custom:security-contact security@golden.com\ncontract GoldenSchema is Ownable {\n    using Bytes16Set for Bytes16Set.Set;\n    Bytes16Set.Set _predicateIDs;\n    mapping(bytes16 => bytes32) public predicateIDToLatestCID;\n\n    Bytes16Set.Set _entityTypeIDs;\n    mapping(bytes16 => bytes32) public entityTypeIDToLatestCID;\n\n    struct Predicate {\n        bytes16 predicateID;\n        bytes32 latestCID;\n    }\n\n    struct EntityType {\n        bytes16 entityTypeID;\n        bytes32 latestCID;\n    }\n\n    event PredicateAdded(\n        bytes16 indexed predicateID,\n        bytes32 indexed latestCID\n    );\n    event PredicateUpdated(\n        bytes16 indexed predicateID,\n        bytes32 indexed latestCID\n    );\n    event PredicateRemoved(\n        bytes16 indexed predicateID,\n        bytes32 indexed latestCID\n    );\n\n    event EntityTypeAdded(\n        bytes16 indexed entityTypeID,\n        bytes32 indexed latestCID\n    );\n    event EntityTypeUpdated(\n        bytes16 indexed entityTypeID,\n        bytes32 indexed latestCID\n    );\n    event EntityTypeRemoved(\n        bytes16 indexed entityTypeID,\n        bytes32 indexed latestCID\n    );\n\n    constructor(\n        Predicate[] memory initialPredicates,\n        EntityType[] memory initialEntityTypes\n    ) Ownable() {\n        uint256 predicateCount = initialPredicates.length;\n        for (uint256 i = 0; i < predicateCount; i++) {\n            addPredicate(\n                initialPredicates[i].predicateID,\n                initialPredicates[i].latestCID\n            );\n        }\n\n        uint256 entityTypeCount = initialEntityTypes.length;\n        for (uint256 i = 0; i < entityTypeCount; i++) {\n            addEntityType(\n                initialEntityTypes[i].entityTypeID,\n                initialEntityTypes[i].latestCID\n            );\n        }\n    }\n\n    function predicates() public view returns (Predicate[] memory) {\n        Predicate[] memory _predicates = new Predicate[](\n            _predicateIDs.keyList.length\n        );\n        for (uint256 i = 0; i < _predicates.length; i++) {\n            _predicates[i].predicateID = _predicateIDs.keyAtIndex(i);\n            _predicates[i].latestCID = predicateIDToLatestCID[\n                _predicateIDs.keyAtIndex(i)\n            ];\n        }\n        return _predicates;\n    }\n\n    function addPredicate(bytes16 predicateID, bytes32 predicateCID)\n        public\n        onlyOwner\n    {\n        _predicateIDs.insert(predicateID);\n        predicateIDToLatestCID[predicateID] = predicateCID;\n        emit PredicateAdded(predicateID, predicateCID);\n    }\n\n    function updatePredicate(bytes16 predicateID, bytes32 predicateCID)\n        public\n        onlyOwner\n    {\n        predicateIDToLatestCID[predicateID] = predicateCID;\n        emit PredicateUpdated(predicateID, predicateCID);\n    }\n\n    function removePredicate(bytes16 predicateID) public onlyOwner {\n        _predicateIDs.remove(predicateID);\n        emit PredicateRemoved(predicateID, predicateIDToLatestCID[predicateID]);\n    }\n\n    function entityTypes() public view returns (EntityType[] memory) {\n        EntityType[] memory _entityTypes = new EntityType[](\n            _entityTypeIDs.keyList.length\n        );\n        for (uint256 i = 0; i < _entityTypes.length; i++) {\n            _entityTypes[i].entityTypeID = _entityTypeIDs.keyAtIndex(i);\n            _entityTypes[i].latestCID = entityTypeIDToLatestCID[\n                _entityTypeIDs.keyAtIndex(i)\n            ];\n        }\n        return _entityTypes;\n    }\n\n    function addEntityType(bytes16 entityTypeID, bytes32 entityTypeCID)\n        public\n        onlyOwner\n    {\n        _entityTypeIDs.insert(entityTypeID);\n        entityTypeIDToLatestCID[entityTypeID] = entityTypeCID;\n        emit EntityTypeAdded(entityTypeID, entityTypeCID);\n    }\n\n    function updateEntityType(bytes16 entityTypeID, bytes32 entityTypeCID)\n        public\n        onlyOwner\n    {\n        entityTypeIDToLatestCID[entityTypeID] = entityTypeCID;\n        emit EntityTypeUpdated(entityTypeID, entityTypeCID);\n    }\n\n    function removeEntityType(bytes16 entityTypeID) public onlyOwner {\n        _entityTypeIDs.remove(entityTypeID);\n        emit EntityTypeRemoved(\n            entityTypeID,\n            entityTypeIDToLatestCID[entityTypeID]\n        );\n    }\n}\n"
    },
    "contracts/libraries/Bytes16Set.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity ^0.8.16;\n\n// Inspired by: https://github.com/rob-Hitchens/SetTypes\n\nlibrary Bytes16Set {\n    struct Set {\n        mapping(bytes16 => uint256) keyPointers;\n        bytes16[] keyList;\n    }\n\n    /**\n     * @notice insert a key.\n     * @dev duplicate keys are not permitted.\n     * @param self storage pointer to a Set.\n     * @param key value to insert.\n     */\n    function insert(Set storage self, bytes16 key) internal {\n        require(\n            !exists(self, key),\n            'Bytes16Set: key already exists in the set.'\n        );\n        self.keyPointers[key] = self.keyList.length;\n        self.keyList.push(key);\n    }\n\n    /**\n     * @notice remove a key.\n     * @dev key to remove must exist.\n     * @param self storage pointer to a Set.\n     * @param key value to remove.\n     */\n    function remove(Set storage self, bytes16 key) internal {\n        require(\n            exists(self, key),\n            'Bytes16Set: key does not exist in the set.'\n        );\n        uint256 last = count(self) - 1;\n        uint256 rowToReplace = self.keyPointers[key];\n        if (rowToReplace != last) {\n            bytes16 keyToMove = self.keyList[last];\n            self.keyPointers[keyToMove] = rowToReplace;\n            self.keyList[rowToReplace] = keyToMove;\n        }\n        delete self.keyPointers[key];\n        self.keyList.pop();\n    }\n\n    /**\n     * @notice count the keys.\n     * @param self storage pointer to a Set.\n     */\n    function count(Set storage self) internal view returns (uint256) {\n        return (self.keyList.length);\n    }\n\n    /**\n     * @notice check if a key is in the Set.\n     * @param self storage pointer to a Set.\n     * @param key value to check.\n     * @return bool true: Set member, false: not a Set member.\n     */\n    function exists(Set storage self, bytes16 key)\n        internal\n        view\n        returns (bool)\n    {\n        if (self.keyList.length == 0) return false;\n        return self.keyList[self.keyPointers[key]] == key;\n    }\n\n    /**\n     * @notice fetch a key by row (enumerate).\n     * @param self storage pointer to a Set.\n     * @param index row to enumerate. Must be < count() - 1.\n     */\n    function keyAtIndex(Set storage self, uint256 index)\n        internal\n        view\n        returns (bytes16)\n    {\n        return self.keyList[index];\n    }\n\n    /**\n     * @notice fetch a key by row (enumerate).\n     * @param self storage pointer to a Set.\n     * @param index row to enumerate. Must be < count() - 1.\n     */\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}