{
  "address": "0x8F73Eb8cAdC48D453af9ECda9cDe0C30c874f12A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "entityTypeID",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "latestCID",
          "type": "bytes32"
        }
      ],
      "name": "EntityTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "entityTypeID",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "latestCID",
          "type": "bytes32"
        }
      ],
      "name": "EntityTypeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "entityTypeID",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "latestCID",
          "type": "bytes32"
        }
      ],
      "name": "EntityTypeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "predicateID",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "latestCID",
          "type": "bytes32"
        }
      ],
      "name": "PredicateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "predicateID",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "latestCID",
          "type": "bytes32"
        }
      ],
      "name": "PredicateRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "predicateID",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "latestCID",
          "type": "bytes32"
        }
      ],
      "name": "PredicateUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "entityTypeID",
          "type": "bytes16"
        },
        {
          "internalType": "bytes32",
          "name": "entityTypeCID",
          "type": "bytes32"
        }
      ],
      "name": "addEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "predicateID",
          "type": "bytes16"
        },
        {
          "internalType": "bytes32",
          "name": "predicateCID",
          "type": "bytes32"
        }
      ],
      "name": "addPredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "name": "entityTypeIDToLatestCID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entityTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "entityTypeID",
              "type": "bytes16"
            },
            {
              "internalType": "bytes32",
              "name": "latestCID",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GoldenSchema.EntityType[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "predicateID",
              "type": "bytes16"
            },
            {
              "internalType": "bytes32",
              "name": "latestCID",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GoldenSchema.Predicate[]",
          "name": "initialPredicates",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "entityTypeID",
              "type": "bytes16"
            },
            {
              "internalType": "bytes32",
              "name": "latestCID",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GoldenSchema.EntityType[]",
          "name": "initialEntityTypes",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "name": "predicateIDToLatestCID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predicates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "predicateID",
              "type": "bytes16"
            },
            {
              "internalType": "bytes32",
              "name": "latestCID",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GoldenSchema.Predicate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "entityTypeID",
          "type": "bytes16"
        }
      ],
      "name": "removeEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "predicateID",
          "type": "bytes16"
        }
      ],
      "name": "removePredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "entityTypeID",
          "type": "bytes16"
        },
        {
          "internalType": "bytes32",
          "name": "entityTypeCID",
          "type": "bytes32"
        }
      ],
      "name": "updateEntityType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "predicateID",
          "type": "bytes16"
        },
        {
          "internalType": "bytes32",
          "name": "predicateCID",
          "type": "bytes32"
        }
      ],
      "name": "updatePredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16e5ac379ea18ae02f11f516df0ff51f70b2262ae26b0bfa82a9515ab7593b0b",
  "receipt": {
    "to": null,
    "from": "0x4e2548274014F034Ffc71947bb7bA584C64E2315",
    "contractAddress": "0x8F73Eb8cAdC48D453af9ECda9cDe0C30c874f12A",
    "transactionIndex": 55,
    "gasUsed": "972155",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x862fbbc7125374bc6f2e9887043280946ec4078e0d9dfee1071d6379f4978c42",
    "transactionHash": "0x16e5ac379ea18ae02f11f516df0ff51f70b2262ae26b0bfa82a9515ab7593b0b",
    "logs": [],
    "blockNumber": 7935631,
    "cumulativeGasUsed": "6999139",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c201d772fa9e2ed5f85e206c6a77cd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"name\":\"EntityTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"name\":\"EntityTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"name\":\"EntityTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"name\":\"PredicateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"name\":\"PredicateRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"name\":\"PredicateUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"entityTypeCID\",\"type\":\"bytes32\"}],\"name\":\"addEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"predicateCID\",\"type\":\"bytes32\"}],\"name\":\"addPredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"entityTypeIDToLatestCID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"internalType\":\"struct GoldenSchema.EntityType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"internalType\":\"struct GoldenSchema.Predicate[]\",\"name\":\"initialPredicates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"internalType\":\"struct GoldenSchema.EntityType[]\",\"name\":\"initialEntityTypes\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"predicateIDToLatestCID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predicates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"latestCID\",\"type\":\"bytes32\"}],\"internalType\":\"struct GoldenSchema.Predicate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"}],\"name\":\"removeEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"}],\"name\":\"removePredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"entityTypeID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"entityTypeCID\",\"type\":\"bytes32\"}],\"name\":\"updateEntityType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"predicateID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"predicateCID\",\"type\":\"bytes32\"}],\"name\":\"updatePredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@golden.com\",\"kind\":\"dev\",\"methods\":{\"initialize((bytes16,bytes32)[],(bytes16,bytes32)[])\":{\"details\":\"Upgradeable initializer\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GoldenSchema.sol\":\"GoldenSchema\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/GoldenSchema.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './libraries/Bytes16Set.sol';\\n\\n/// @custom:security-contact security@golden.com\\n//slither-disable-next-line unused-state\\ncontract GoldenSchema is OwnableUpgradeable {\\n    using Bytes16Set for Bytes16Set.Set;\\n    Bytes16Set.Set _predicateIDs;\\n    mapping(bytes16 => bytes32) public predicateIDToLatestCID;\\n\\n    Bytes16Set.Set _entityTypeIDs;\\n    mapping(bytes16 => bytes32) public entityTypeIDToLatestCID;\\n\\n    struct Predicate {\\n        bytes16 predicateID;\\n        bytes32 latestCID;\\n    }\\n\\n    struct EntityType {\\n        bytes16 entityTypeID;\\n        bytes32 latestCID;\\n    }\\n\\n    event PredicateAdded(\\n        bytes16 indexed predicateID,\\n        bytes32 indexed latestCID\\n    );\\n    event PredicateUpdated(\\n        bytes16 indexed predicateID,\\n        bytes32 indexed latestCID\\n    );\\n    event PredicateRemoved(\\n        bytes16 indexed predicateID,\\n        bytes32 indexed latestCID\\n    );\\n\\n    event EntityTypeAdded(\\n        bytes16 indexed entityTypeID,\\n        bytes32 indexed latestCID\\n    );\\n    event EntityTypeUpdated(\\n        bytes16 indexed entityTypeID,\\n        bytes32 indexed latestCID\\n    );\\n    event EntityTypeRemoved(\\n        bytes16 indexed entityTypeID,\\n        bytes32 indexed latestCID\\n    );\\n\\n    /**\\n     * @dev Upgradeable initializer\\n     */\\n    function initialize(\\n        Predicate[] memory initialPredicates,\\n        EntityType[] memory initialEntityTypes\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        uint256 predicateCount = initialPredicates.length;\\n        for (uint256 i = 0; i < predicateCount; i++) {\\n            addPredicate(\\n                initialPredicates[i].predicateID,\\n                initialPredicates[i].latestCID\\n            );\\n        }\\n\\n        uint256 entityTypeCount = initialEntityTypes.length;\\n        for (uint256 i = 0; i < entityTypeCount; i++) {\\n            addEntityType(\\n                initialEntityTypes[i].entityTypeID,\\n                initialEntityTypes[i].latestCID\\n            );\\n        }\\n    }\\n\\n    function predicates() public view returns (Predicate[] memory) {\\n        Predicate[] memory _predicates = new Predicate[](\\n            _predicateIDs.keyList.length\\n        );\\n        for (uint256 i = 0; i < _predicates.length; i++) {\\n            _predicates[i].predicateID = _predicateIDs.keyAtIndex(i);\\n            _predicates[i].latestCID = predicateIDToLatestCID[\\n                _predicateIDs.keyAtIndex(i)\\n            ];\\n        }\\n        return _predicates;\\n    }\\n\\n    function addPredicate(bytes16 predicateID, bytes32 predicateCID)\\n        public\\n        onlyOwner\\n    {\\n        _predicateIDs.insert(predicateID);\\n        predicateIDToLatestCID[predicateID] = predicateCID;\\n        emit PredicateAdded(predicateID, predicateCID);\\n    }\\n\\n    function updatePredicate(bytes16 predicateID, bytes32 predicateCID)\\n        public\\n        onlyOwner\\n    {\\n        predicateIDToLatestCID[predicateID] = predicateCID;\\n        emit PredicateUpdated(predicateID, predicateCID);\\n    }\\n\\n    function removePredicate(bytes16 predicateID) public onlyOwner {\\n        _predicateIDs.remove(predicateID);\\n        emit PredicateRemoved(predicateID, predicateIDToLatestCID[predicateID]);\\n    }\\n\\n    function entityTypes() public view returns (EntityType[] memory) {\\n        EntityType[] memory _entityTypes = new EntityType[](\\n            _entityTypeIDs.keyList.length\\n        );\\n        for (uint256 i = 0; i < _entityTypes.length; i++) {\\n            _entityTypes[i].entityTypeID = _entityTypeIDs.keyAtIndex(i);\\n            _entityTypes[i].latestCID = entityTypeIDToLatestCID[\\n                _entityTypeIDs.keyAtIndex(i)\\n            ];\\n        }\\n        return _entityTypes;\\n    }\\n\\n    function addEntityType(bytes16 entityTypeID, bytes32 entityTypeCID)\\n        public\\n        onlyOwner\\n    {\\n        _entityTypeIDs.insert(entityTypeID);\\n        entityTypeIDToLatestCID[entityTypeID] = entityTypeCID;\\n        emit EntityTypeAdded(entityTypeID, entityTypeCID);\\n    }\\n\\n    function updateEntityType(bytes16 entityTypeID, bytes32 entityTypeCID)\\n        public\\n        onlyOwner\\n    {\\n        entityTypeIDToLatestCID[entityTypeID] = entityTypeCID;\\n        emit EntityTypeUpdated(entityTypeID, entityTypeCID);\\n    }\\n\\n    function removeEntityType(bytes16 entityTypeID) public onlyOwner {\\n        _entityTypeIDs.remove(entityTypeID);\\n        emit EntityTypeRemoved(\\n            entityTypeID,\\n            entityTypeIDToLatestCID[entityTypeID]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7edcb154559f33083e051edc65b1dbe271980ff7308d71a37190d31975a4e16a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Bytes16Set.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\n\\n// Inspired by: https://github.com/rob-Hitchens/SetTypes\\n\\nlibrary Bytes16Set {\\n    struct Set {\\n        mapping(bytes16 => uint256) keyPointers;\\n        bytes16[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, bytes16 key) internal {\\n        require(\\n            !exists(self, key),\\n            'Bytes16Set: key already exists in the set.'\\n        );\\n        self.keyPointers[key] = self.keyList.length;\\n        self.keyList.push(key);\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, bytes16 key) internal {\\n        require(\\n            exists(self, key),\\n            'Bytes16Set: key does not exist in the set.'\\n        );\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            bytes16 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, bytes16 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (bytes16)\\n    {\\n        return self.keyList[index];\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n}\\n\",\"keccak256\":\"0xdca817798f89a0667b77af13d4c0f369f34ff8149ae499559fd4b9caf96ca657\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061109f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063b988eb1211610066578063b988eb12146101e1578063c99f941c146101f4578063d6b7636314610207578063f2fde38b1461021a57600080fd5b8063715018a61461019e5780638da5cb5b146101a6578063b4112e40146101c157600080fd5b80633c3efab4116100c85780633c3efab414610135578063457401d31461014a5780634c019d2114610178578063702f1f5d1461018b57600080fd5b80632514704c146100ef5780632562e43b1461010457806338b7a7d514610122575b600080fd5b6101026100fd366004610d1e565b61022d565b005b61010c610286565b6040516101199190610d40565b60405180910390f35b610102610130366004610da1565b61039b565b61013d6103eb565b6040516101199190610dcb565b61016a610158366004610d1e565b606a6020526000908152604090205481565b604051908152602001610119565b610102610186366004610da1565b6104fa565b610102610199366004610da1565b610555565b6101026105b0565b6033546040516001600160a01b039091168152602001610119565b61016a6101cf366004610d1e565b60676020526000908152604090205481565b6101026101ef366004610da1565b6105c4565b610102610202366004610ef8565b610614565b610102610215366004610d1e565b6107f6565b610102610228366004610f87565b61084f565b6102356108c8565b610240606882610922565b6001600160801b031981166000818152606a60205260408082205490519092917f5529e55acb20a6fcca4dbfdd33eeecebc71fbf8f6eeb050ba1a50b66511c48a891a350565b60695460609060009067ffffffffffffffff8111156102a7576102a7610e1f565b6040519080825280602002602001820160405280156102ec57816020015b60408051808201909152600080825260208201528152602001906001900390816102c55790505b50905060005b815181101561039557610306606882610acb565b82828151811061031857610318610fb0565b60209081029190910101516001600160801b03199091169052606a6000610340606884610acb565b6001600160801b0319166001600160801b03191681526020019081526020016000205482828151811061037557610375610fb0565b60209081029190910181015101528061038d81610fdc565b9150506102f2565b50919050565b6103a36108c8565b6001600160801b03198216600081815260676020526040808220849055518392917f115c3e1d5164e8f7d3fc558e8a290f058c709114555eed7426c3c3b9d7d7318591a35050565b60665460609060009067ffffffffffffffff81111561040c5761040c610e1f565b60405190808252806020026020018201604052801561045157816020015b604080518082019091526000808252602082015281526020019060019003908161042a5790505b50905060005b81518110156103955761046b606582610acb565b82828151811061047d5761047d610fb0565b60209081029190910101516001600160801b03199091169052606760006104a5606584610acb565b6001600160801b0319166001600160801b0319168152602001908152602001600020548282815181106104da576104da610fb0565b6020908102919091018101510152806104f281610fdc565b915050610457565b6105026108c8565b61050d606883610b0e565b6001600160801b031982166000818152606a6020526040808220849055518392917f2f872f7622fa2463de842fdb296dcd8b04e8d9a4c74f9d1bd7fc394e9bbbbc5d91a35050565b61055d6108c8565b610568606583610b0e565b6001600160801b03198216600081815260676020526040808220849055518392917fddbd9c69ad18561fc7cf11ff7be612fea0c255ddacedce5a41dd21a65a24ae8591a35050565b6105b86108c8565b6105c26000610bd6565b565b6105cc6108c8565b6001600160801b031982166000818152606a6020526040808220849055518392917fbeabbc887e1b032117e8c1eb4816b60ee38c9678b75138255a0fb0c505badb5891a35050565b600054610100900460ff16158080156106345750600054600160ff909116105b8061064e5750303b15801561064e575060005460ff166001145b6106b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156106d9576000805461ff0019166101001790555b6106e1610c28565b825160005b818110156107445761073285828151811061070357610703610fb0565b60200260200101516000015186838151811061072157610721610fb0565b602002602001015160200151610555565b8061073c81610fdc565b9150506106e6565b50825160005b818110156107a85761079685828151811061076757610767610fb0565b60200260200101516000015186838151811061078557610785610fb0565b6020026020010151602001516104fa565b806107a081610fdc565b91505061074a565b50505080156107f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6107fe6108c8565b610809606582610922565b6001600160801b031981166000818152606760205260408082205490519092917f0792080f73e0f4bd6ee184076e9f0924507e65f2aa6517aef7b6abd9bc45b96291a350565b6108576108c8565b6001600160a01b0381166108bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ad565b6108c581610bd6565b50565b6033546001600160a01b031633146105c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ad565b61092c8282610c57565b61098b5760405162461bcd60e51b815260206004820152602a60248201527f427974657331365365743a206b657920646f6573206e6f74206578697374206960448201526937103a34329039b2ba1760b11b60648201526084016106ad565b6000600161099a846001015490565b6109a49190610ff5565b6001600160801b03198316600090815260208590526040902054909150808214610a675760008460010183815481106109df576109df610fb0565b6000918252602080832060028304015460019283166010026101000a900460801b6001600160801b03198116845290889052604090922084905586018054919250829184908110610a3257610a32610fb0565b90600052602060002090600291828204019190066010026101000a8154816001600160801b03021916908360801c0217905550505b6001600160801b0319831660009081526020859052604081205560018401805480610a9457610a94611008565b60008281526020902060026000199092019182040180546001600160801b03601060018516026101000a0219169055905550505050565b6000826001018281548110610ae257610ae2610fb0565b90600052602060002090600291828204019190066010029054906101000a900460801b90505b92915050565b610b188282610c57565b15610b785760405162461bcd60e51b815260206004820152602a60248201527f427974657331365365743a206b657920616c726561647920657869737473206960448201526937103a34329039b2ba1760b11b60648201526084016106ad565b600182810180546001600160801b0319841660009081526020958652604081208290558184018355918252939020600284040180546001600160801b03949092166010026101000a9384021990911660809290921c92909202179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610c4f5760405162461bcd60e51b81526004016106ad9061101e565b6105c2610cd1565b60018201546000908103610c6d57506000610b08565b6001600160801b031982166000818152602085905260409020546001850180549091908110610c9e57610c9e610fb0565b6000918252602090912060028204015460019091166010026101000a900460801b6001600160801b031916149392505050565b600054610100900460ff16610cf85760405162461bcd60e51b81526004016106ad9061101e565b6105c233610bd6565b80356001600160801b031981168114610d1957600080fd5b919050565b600060208284031215610d3057600080fd5b610d3982610d01565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610d9457610d8484835180516001600160801b0319168252602090810151910152565b9284019290850190600101610d5d565b5091979650505050505050565b60008060408385031215610db457600080fd5b610dbd83610d01565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015610d9457610e0f84835180516001600160801b0319168252602090810151910152565b9284019290850190600101610de8565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610e5057610e50610e1f565b60408051601f19603f8760051b011681018181108482111715610e7557610e75610e1f565b82528581529250600685901b840160208085019088831115610e9657600080fd5b865b83811015610eeb5784818b031215610eb05760008081fd5b84518581018181108882111715610ec957610ec9610e1f565b8652610ed482610d01565b815281830135838201528352918101918401610e98565b5050505050509392505050565b60008060408385031215610f0b57600080fd5b823567ffffffffffffffff80821115610f2357600080fd5b818501915085601f830112610f3757600080fd5b610f4686833560208501610e35565b93506020850135915080821115610f5c57600080fd5b508301601f81018513610f6e57600080fd5b610f7d85823560208401610e35565b9150509250929050565b600060208284031215610f9957600080fd5b81356001600160a01b0381168114610d3957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610fee57610fee610fc6565b5060010190565b81810381811115610b0857610b08610fc6565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212207ad3e941b9b9d9f9eaa78484cad2937f9bfb1e9e504780ae94a23cac02a17ddb64736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "custom:security-contact": "security@golden.com",
    "kind": "dev",
    "methods": {
      "initialize((bytes16,bytes32)[],(bytes16,bytes32)[])": {
        "details": "Upgradeable initializer"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 581,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_predicateIDs",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Set)979_storage"
      },
      {
        "astId": 585,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "predicateIDToLatestCID",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes16,t_bytes32)"
      },
      {
        "astId": 588,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "_entityTypeIDs",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Set)979_storage"
      },
      {
        "astId": 592,
        "contract": "contracts/GoldenSchema.sol:GoldenSchema",
        "label": "entityTypeIDToLatestCID",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_bytes16,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes16)dyn_storage": {
        "base": "t_bytes16",
        "encoding": "dynamic_array",
        "label": "bytes16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)979_storage": {
        "encoding": "inplace",
        "label": "struct Bytes16Set.Set",
        "members": [
          {
            "astId": 975,
            "contract": "contracts/GoldenSchema.sol:GoldenSchema",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes16,t_uint256)"
          },
          {
            "astId": 978,
            "contract": "contracts/GoldenSchema.sol:GoldenSchema",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes16)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}